!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!g[e]||!_[e])return;for(var n in _[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(p[n]=t[n]);0==--m&&0===y&&j()}(e,n),t&&t(e,n)};var n,i=!0,r="290aa1feed3350962f0a",o=1e4,s={},c=[],a=[];function u(e){var t=A[e];if(!t)return $;var i=function(i){return t.hot.active?(A[i]?-1===A[i].parents.indexOf(e)&&A[i].parents.push(e):(c=[e],n=i),-1===t.children.indexOf(i)&&t.children.push(i)):(console.warn("[HMR] unexpected require("+i+") from disposed module "+e),c=[]),$(i)},r=function(e){return{configurable:!0,enumerable:!0,get:function(){return $[e]},set:function(t){$[e]=t}}};for(var o in $)Object.prototype.hasOwnProperty.call($,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(i,o,r(o));return i.e=function(e){return"ready"===d&&h("prepare"),y++,$.e(e).then(t,function(e){throw t(),e});function t(){y--,"prepare"===d&&(b[e]||E(e),0===y&&0===m&&j())}},i.t=function(e,t){return 1&t&&(e=i(e)),$.t(e,-2&t)},i}var l=[],d="idle";function h(e){d=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}var f,p,v,m=0,y=0,b={},_={},g={};function w(e){return+e+""===e?+e:e}function x(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return i=e,h("check"),function(e){return e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var i=new XMLHttpRequest,o=$.p+""+r+".hot-update.json";i.open("GET",o,!0),i.timeout=e,i.send(null)}catch(e){return n(e)}i.onreadystatechange=function(){if(4===i.readyState)if(0===i.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===i.status)t();else if(200!==i.status&&304!==i.status)n(new Error("Manifest request to "+o+" failed."));else{try{var e=JSON.parse(i.responseText)}catch(e){return void n(e)}t(e)}}})}(o).then(function(e){if(!e)return h("idle"),null;_={},b={},g=e.c,v=e.h,h("prepare");var t=new Promise(function(e,t){f={resolve:e,reject:t}});p={};return E(0),"prepare"===d&&0===y&&0===m&&j(),t})}function E(e){g[e]?(_[e]=!0,m++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=$.p+""+e+"."+r+".hot-update.js",t.appendChild(n)}(e)):b[e]=!0}function j(){h("ready");var e=f;if(f=null,e)if(i)Promise.resolve().then(function(){return O(i)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in p)Object.prototype.hasOwnProperty.call(p,n)&&t.push(w(n));e.resolve(t)}}function O(t){if("ready"!==d)throw new Error("apply() is only allowed in ready status");var n,i,o,a,u;function l(e){for(var t=[e],n={},i=t.slice().map(function(e){return{chain:[e],id:e}});i.length>0;){var r=i.pop(),o=r.id,s=r.chain;if((a=A[o])&&!a.hot._selfAccepted){if(a.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:o};if(a.hot._main)return{type:"unaccepted",chain:s,moduleId:o};for(var c=0;c<a.parents.length;c++){var u=a.parents[c],l=A[u];if(l){if(l.hot._declinedDependencies[o])return{type:"declined",chain:s.concat([u]),moduleId:o,parentId:u};-1===t.indexOf(u)&&(l.hot._acceptedDependencies[o]?(n[u]||(n[u]=[]),f(n[u],[o])):(delete n[u],t.push(u),i.push({chain:s.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function f(e,t){for(var n=0;n<t.length;n++){var i=t[n];-1===e.indexOf(i)&&e.push(i)}}t=t||{};var m={},y=[],b={},_=function(){console.warn("[HMR] unexpected require("+E.moduleId+") to disposed module")};for(var x in p)if(Object.prototype.hasOwnProperty.call(p,x)){var E;u=w(x);var j=!1,O=!1,k=!1,C="";switch((E=p[x]?l(u):{type:"disposed",moduleId:x}).chain&&(C="\nUpdate propagation: "+E.chain.join(" -> ")),E.type){case"self-declined":t.onDeclined&&t.onDeclined(E),t.ignoreDeclined||(j=new Error("Aborted because of self decline: "+E.moduleId+C));break;case"declined":t.onDeclined&&t.onDeclined(E),t.ignoreDeclined||(j=new Error("Aborted because of declined dependency: "+E.moduleId+" in "+E.parentId+C));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(E),t.ignoreUnaccepted||(j=new Error("Aborted because "+u+" is not accepted"+C));break;case"accepted":t.onAccepted&&t.onAccepted(E),O=!0;break;case"disposed":t.onDisposed&&t.onDisposed(E),k=!0;break;default:throw new Error("Unexception type "+E.type)}if(j)return h("abort"),Promise.reject(j);if(O)for(u in b[u]=p[u],f(y,E.outdatedModules),E.outdatedDependencies)Object.prototype.hasOwnProperty.call(E.outdatedDependencies,u)&&(m[u]||(m[u]=[]),f(m[u],E.outdatedDependencies[u]));k&&(f(y,[E.moduleId]),b[u]=_)}var P,S=[];for(i=0;i<y.length;i++)u=y[i],A[u]&&A[u].hot._selfAccepted&&S.push({module:u,errorHandler:A[u].hot._selfAccepted});h("dispose"),Object.keys(g).forEach(function(e){!1===g[e]&&function(e){delete installedChunks[e]}(e)});for(var M,T,D=y.slice();D.length>0;)if(u=D.pop(),a=A[u]){var N={},H=a.hot._disposeHandlers;for(o=0;o<H.length;o++)(n=H[o])(N);for(s[u]=N,a.hot.active=!1,delete A[u],delete m[u],o=0;o<a.children.length;o++){var I=A[a.children[o]];I&&((P=I.parents.indexOf(u))>=0&&I.parents.splice(P,1))}}for(u in m)if(Object.prototype.hasOwnProperty.call(m,u)&&(a=A[u]))for(T=m[u],o=0;o<T.length;o++)M=T[o],(P=a.children.indexOf(M))>=0&&a.children.splice(P,1);for(u in h("apply"),r=v,b)Object.prototype.hasOwnProperty.call(b,u)&&(e[u]=b[u]);var F=null;for(u in m)if(Object.prototype.hasOwnProperty.call(m,u)&&(a=A[u])){T=m[u];var L=[];for(i=0;i<T.length;i++)if(M=T[i],n=a.hot._acceptedDependencies[M]){if(-1!==L.indexOf(n))continue;L.push(n)}for(i=0;i<L.length;i++){n=L[i];try{n(T)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:u,dependencyId:T[i],error:e}),t.ignoreErrored||F||(F=e)}}}for(i=0;i<S.length;i++){var U=S[i];u=U.module,c=[u];try{$(u)}catch(e){if("function"==typeof U.errorHandler)try{U.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:n,originalError:e}),t.ignoreErrored||F||(F=n),F||(F=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:u,error:e}),t.ignoreErrored||F||(F=e)}}return F?(h("fail"),Promise.reject(F)):(h("idle"),new Promise(function(e){e(y)}))}var A={};function $(t){if(A[t])return A[t].exports;var i=A[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var i=0;i<e.length;i++)t._acceptedDependencies[e[i]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:x,apply:O,status:function(e){if(!e)return d;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:s[e]};return n=void 0,t}(t),parents:(a=c,c=[],a),children:[]};return e[t].call(i.exports,i,i.exports,u(t)),i.l=!0,i.exports}$.m=e,$.c=A,$.d=function(e,t,n){$.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},$.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},$.t=function(e,t){if(1&t&&(e=$(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if($.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)$.d(n,i,function(t){return e[t]}.bind(null,i));return n},$.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return $.d(t,"a",t),t},$.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},$.p="",$.h=function(){return r},u("./src/main.js")($.s="./src/main.js")}({"./src/compile.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.compile=function(e,t){a(t,e)||t.hasChildNodes()&&function e(t,n){t.forEach(function(t){a(t,n)||t.hasChildNodes()&&e(t.childNodes,n)})}(t.childNodes,e);if(!c){var n=void 0,r=void 0;for(c=!0,function(e){e.forEach(function(e){e.def.priority||(e.def.priority=1e3)}),e.sort(function(e,t){return t.def.priority-e.def.priority})}(s);s.length;)r=s.shift(),(n=new i.default(r,r.vm))._bind(),r.vm._directives.push(n);c=!1,e._callHook("compiled"),setTimeout(function(){!function(e){var t=document.body,n=t.contains,i=e._directives,r=void 0,o=[],s=void 0;for(;i.length;)s=i.shift(),r=s.descriptor.attr,n.call(t,s.el)||"v-for"===r||"v-if"===r?o.push(s):s._teardown();e._directives=[].concat(o),o.length=0}(e),e._callHook("destroyed")},0)}},t.compileProps=function(e,t,n){var i=e.$options.directives,c=[],a=void 0,u=void 0,l=void 0;Object.keys(n).forEach(function(e){l=n[e],a={name:l,path:l},null!==(u=(0,r.getBindAttr)(t,l))?(a.dynamic=!0,a.raw=a.parentPath=u):null!==(u=(0,r.getAttr)(t,l))&&(a.raw=u),c.push(a)}),e._props={},c.forEach(function(t){var n=t.path;t.raw,t.options;e._props[n]=t,t.dynamic?e._context&&s.push({vm:e,name:"prop",def:i.prop,prop:t}):(0,o.defineReactive)(e,t.path,t.raw)})};var i=function(e){return e&&e.__esModule?e:{default:e}}(n("./src/directive.js")),r=n("./src/utils.js"),o=n("./src/observer.js");var s=[],c=!1;function a(e,t){var n=e.nodeType;return 1==n?function(e,t){var n=t.$options.directives,i=e.tagName.toLowerCase();if(f.test(i)||p.test(i)){if("slot"===i)s.push({vm:t,el:e,arg:void 0,name:"slot",attr:void 0,expression:"",def:n.slot});else if(e.hasAttributes()){var o=void 0,c=!1,a=(0,r.toArray)(e.attributes);return a.forEach(function(i){var r=i.name.trim(),a=i.value.trim();if(u.test(r))e.removeAttribute(r),s.push({vm:t,el:e,arg:r.replace(u,""),name:"on",attr:r,expression:a,def:n.on});else if(d.test(r)){e.removeAttribute(r);var h=a.split("|"),f={vm:t,el:e,arg:r.replace(d,""),name:"bind",attr:r,def:n.bind};if(a.length>1){var p=h.shift(),v=[];h.forEach(function(e){v.push({name:e.trim()})}),f.expression=p,f.filters=v}else f.expression=a;s.push(f)}else if(o=r.match(l)){if("v-text"==r){e.removeAttribute(r);var m=a.split("|"),y={vm:t,el:e,arg:r.replace(d,""),name:"text",attr:r,def:n.text};if(a.length>1){var b=m.shift(),_=[];m.forEach(function(e){_.push({name:e.trim()})}),y.expression=b,y.filters=_}else y.expression=a;s.push(y)}else"v-else"!==r&&(e.removeAttribute(r),s.push({vm:t,el:e,arg:void 0,name:r.replace(/^v-/,""),attr:r,expression:a,def:n[o[1]]}));"v-for"==r&&(c=!0)}}),c}}else t.$options.components[i]&&s.push({vm:t,el:e,name:"component",expression:i,def:n.component,modifiers:{literal:!0}})}(e,t):3==n?function(e,t){var n=function(e,t){var n=0,i=0,r=void 0,o=[];for(;r=h.exec(e);)(n=r.index)>i&&o.push({value:e.slice(i,n)}),o.push({value:r[2],tag:!0}),i=n+r[0].length;i<e.length&&o.push({value:e.slice(i)});return o}(e.nodeValue);if(!n)return;var i=document.createDocumentFragment(),o=void 0;n.forEach(function(e){o=e.tag?function(e,t){var n=t.$options.directives,i=document.createTextNode(" ");if(e.descriptor)return;var r=e.value.split("|");if(e.descriptor={vm:t,el:i,name:"text",def:n.text},r.length>1){var o=r.shift(),s=[];r.forEach(function(e){s.push({name:e.trim()})}),e.descriptor.expression=o.trim(),e.descriptor.filters=s}else e.descriptor.expression=e.value.trim();return i}(e,t):document.createTextNode(e.value),i.appendChild(o),e.tag&&s.push(e.descriptor)}),(0,r.replace)(e,i)}(e,t):void 0}var u=/^(v-on:|@)/,l=/^v-([^:]+)(?:$|:(.*)$)/,d=/^(v-bind:|:)/,h=/\{\{\{((?:.|\n)+?)\}\}\}|\{\{((?:.|\n)+?)\}\}/g,f=/^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer|button|textarea)$/i,p=/^(slot|partial|component)$/i},"./src/dep.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=r;var i=0;function r(){this.id=i++,this.subs=[]}r.target=null,r.prototype={depend:function(){r.target&&r.target.addDep(this)},addSub:function(e){this.subs.push(e)},removeSub:function(e){var t=this.subs.indexOf(e);t>-1&&this.subs.splice(t,1)},notify:function(){this.subs.forEach(function(e){e.update()})}}},"./src/directive.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=o;var i=n("./src/utils.js"),r=n("./src/watcher.js");function o(e,t){this.vm=t,this.name=e.name,this.descriptor=e,this.expression=e.expression,this.el=e.el,this.filters=e.filters,this.modifiers=e.modifiers,this.literal=this.modifiers&&this.modifiers.literal}o.prototype={_bind:function(){var e=this.descriptor,t=e.def;if("function"==typeof t?this.update=t:(0,i.extend)(this,t),this.bind&&this.bind(),this.literal)this.update&&this.update(e.raw);else if(this.expression){var n=this;this.update&&(this._update=function(e,t){n.update(e,t)});var o=this._watcher=new r.Watcher(this.vm,this.expression,this._update,{filters:this.filters});this.update&&this.update(o.value)}},set:function(e){this._watcher.set(e)},_teardown:function(e){this.unbind&&this.unbind(),this._watcher&&this._watcher.teardown(),this.vm=this.el=this._watcher=null}}},"./src/directives.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=n("./src/utils.js"),o=n("./src/compile.js"),s=n("./src/observer.js"),c=n("./src/watcher.js"),a={text:{bind:function(){var e=this;this.listener=function(){e.set(this.value)},(0,r.on)(this.el,"input",this.listener)},update:function(e){this.el.value=e},unbind:function(){(0,r.off)(this.el,"input",this.listener)}},select:{bind:function(){var e=this,t=this.el,n=this.multiple=t.hasAttribute("multiple");this.listener=function(){var i=u(t,n);e.set(i)},(0,r.on)(t,"change",this.listener),u(t,n,!0)},update:function(e){var t=this.el;t.selectedIndex=-1;for(var n=this.multiple&&(0,r.isArray)(e),i=t.options,o=i.length,s=void 0,c=void 0;o--;)c=(s=i[o]).value,s.selected=n?e.indexOf(c)>-1:e==c},unbind:function(){(0,r.off)(this.el,"change",this.listener)}},radio:{bind:function(){var e=this;this.el;this.listener=function(){e.set(this.value)},(0,r.on)(this.el,"change",this.listener)},update:function(e){var t=this.el;t.checked=t.value==e},unbind:function(){(0,r.off)(this.el,"change",this.listener)}},checkbox:{bind:function(){var e=this,t=this.el;this.listener=function(){var n=t.checked,i=e._watcher.get();if((0,r.isArray)(i)){var o=i.indexOf(this.value);n?-1==o&&e.set(i.concat(this.value)):e.set(i.slice(0,o).concat(i.slice(o+1)))}else e.set(n)},(0,r.on)(t,"change",this.listener)},update:function(e){var t=this.el;(0,r.isArray)(e)?t.checked=e.indexOf(t.value)>-1:t.checked=!!e},unbind:function(){(0,r.off)(el,"change",this.listener)}}};function u(e,t,n){for(var i=t?[]:null,r=void 0,o=0,s=e.options.length;o<s;o++)if(r=e.options[o],n?r.hasAttribute("selected"):r.selected){if(!t)return r.value;i.push(r.value)}return i}t.default={text:{bind:function(){this.attr=3===this.el.nodeType?"data":"textContent"},update:function(e){this.el[this.attr]=e}},on:{priority:700,update:function(e){this.handler&&(0,r.off)(this.el,this.descriptor.arg,this.handler),this.handler=e,(0,r.on)(this.el,this.descriptor.arg,this.handler)},unbind:function(){this.handler&&(0,r.off)(this.el,this.descriptor.arg,this.handler)}},bind:{priority:850,bind:function(){this.attr=this.descriptor.arg},update:function(e){this.el.setAttribute(this.attr,e)}},model:{priority:800,bind:function(){var e=this.el,t=void 0;switch(e.tagName){case"INPUT":t=a[e.type]||a.text;break;case"TEXTAREA":t=a.text;break;case"SELECT":t=a.select;break;default:return}t.bind.call(this),this.update=t.update}},html:{update:function(e){this.el.innerHTML=e}},show:{update:function(e){this.el.style.display=e?"":"none"}},if:{priority:2100,bind:function(){var e=this.el,t=e.nextElementSibling;t&&null!==(0,r.getAttr)(t,"v-else")&&((0,r.remove)(t),this.elseEl=t),this.anchor=document.createTextNode(""),(0,r.replace)(e,this.anchor),this.isFirst=!0},update:function(e){var t=this;e?(this.cloneElseEl&&(0,r.remove)(this.cloneElseEl),this.isFirst?(this.isFirst=!1,setTimeout(function(){t.cloneEl=t.el.cloneNode(!0),(0,r.insert)(t.cloneEl,t.anchor)},0)):(this.cloneEl=this.el.cloneNode(!0),(0,r.insert)(this.cloneEl,this.anchor))):(this.cloneEl&&(0,r.remove)(this.cloneEl),this.isFirst?(this.isFirst=!1,setTimeout(function(){t.cloneElseEl=t.elseEl.cloneNode(!0),(0,r.insert)(t.cloneElseEl,t.anchor)},0)):(this.cloneElseEl=this.elseEl.cloneNode(!0),(0,r.insert)(this.cloneElseEl,this.anchor)))}},for:{priority:2200,bind:function(){var e=this.expression.match(/(.*) (?:in|of) (.*)/);if(e){var t=e[1].match(/\((.*),(.*)\)/);t?(this.valueKey=t[1].trim(),this.indexKey=t[2].trim()):this.valueKey=e[1].trim()}else this.valueKey=e[1].trim();this.expression=e[2].trim(),this.anchor=document.createTextNode(""),this.frag=document.createDocumentFragment(),(0,r.replace)(this.el,this.anchor)},update:function(e){if(this.len)for(;this.len--;)(0,r.remove)(this.anchor.previousElementSibling);var t=void 0,n=void 0,s=void 0,c=void 0;if("object"===(void 0===e?"undefined":i(e))){for(var a in this.len=0,e)this.len++,c=(t=this.el.cloneNode(!0)).innerHTML,this.valueKey&&(n=new RegExp("{{\\s*"+this.valueKey+"\\s*}}","g"),c=c.replace(n,e[a])),this.indexKey&&(s=new RegExp("{{\\s*"+this.indexKey+"\\s*}}","g"),c=c.replace(s,a)),t.innerHTML=c,this.frag.appendChild(t);(0,o.compile)(this.vm,this.frag),(0,r.insert)(this.frag,this.anchor)}else console.error(this.expression+"必须为对象或数组")}},component:{priority:1500,bind:function(){this.anchor=document.createTextNode(""),(0,r.replace)(this.el,this.anchor);var e=this.build();(0,r.insert)(e.$el,this.anchor)},build:function(){this.Component=this.vm.$options.components[this.expression];var e={name:this.expression,el:this.el.cloneNode(!0),_asComponent:!0,_context:this.vm,parent:this.vm};return new this.Component(e)}},prop:{bind:function(){var e=this.vm,t=e._context,n=this.descriptor.prop,i=(n.path,n.parentPath),r=this.parentWatcher=new c.Watcher(t,i,function(t){e[n.path]=t},{sync:!0});(0,s.defineReactive)(e,n.path,r.value)},unbind:function(){}},slot:{priority:2300,bind:function(){var e=(0,r.getAttr)(this.el,"name");null==e&&(e="default");var t=this.vm._slotContents&&this.vm._slotContents[e];(0,r.replace)(this.el,t)}}}},"./src/main.js":function(e,t,n){"use strict";var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=l(n("./src/observer.js")),o=n("./src/watcher.js"),s=n("./src/utils.js"),c=n("./src/compile.js"),a=l(n("./src/directives.js")),u=l(n("./src/dep.js"));function l(e){return e&&e.__esModule?e:{default:e}}function d(e){this._init(e)}function h(){}function f(e,t,n){var r=(0,s.deepCopy)(e);return Object.keys(t).forEach(function(e){(0,s.hasOwn)(r,e)?(0,s.isArray)(r[e])?r[e]=r[e].concat(t[e]):"object"==i(t[e])&&(0,s.extend)(r[e],t[e]):r[e]=t[e]}),r}d.options={directives:a.default,components:{},filters:{}},d.mixin=function(e){this.options=f(this.options,e)},d.directive=function(e,t){this.options.directives[e]=t},d.use=function(e){if(!e.installed){var t=(0,s.toArray)(arguments,1);return t.unshift(this),"function"==typeof e.install?e.install.apply(e,t):e.apply(null,t),e.installed=!0,this}},d.cid=0,d.extend=function(e){e=e||{};var t=0===this.cid;if(t&&e._Ctor)return e._Ctor;var n=e.name||this.options.name,i=new Function("return function "+function(e){return e.replace(v,s.toUpper)}(n)+" (options) { this._init(options) }")();return i.prototype=Object.create(this.prototype),i.prototype.constructor=i,i.options=f(this.options,e),i.super=this,i.extend=this.extend,i.component=this.component,n&&(i.options.components[n]=i),t&&(e._Ctor=i),i},d.component=function(e,t,n){return t?(t.name||(t.name=e),t=d.extend(t),n||(this.options.components[e]=t),t):this.options.components[e]},d.filter=function(e,t){this.options.filters[e]=t},d.prototype={constructor:d,_init:function(e){this.$el=null,this.$parent=e.parent,this._isMiniVue=!0,this.$root=this.$parent?this.$parent.$root:this,this.$children=[],this._watchers=[],this._events={},this._directives=[],this._context=e._context||this.$parent,this.$parent&&this.$parent.$children.push(this),e=this.$options=f(this.constructor.options,e,this),this._callHook("init"),this._initMixins(),this._initComponents(),this._initProps(),this._initMethods(),this._initData(),this._initWatch(),this._initComputed(),this._initEvents(),this._callHook("created"),this._compile()},_initMixins:function(){var e=this.$options;e.mixin&&(this.$options=f(e,e.mixin))},_initComponents:function(){var e=this.$options.components;Object.keys(e).forEach(function(t){e[t]=d.component(t,e[t],!0)})},_initProps:function(){var e=this.$options,t=e.el,n=e.props;t=e.el=(0,s.query)(t),n&&1==t.nodeType&&(0,c.compileProps)(this,t,n)},_initMethods:function(){var e=this,t=this.$options.methods?this.$options.methods:{};Object.keys(t).forEach(function(n){e[n]=(0,s.bind)(t[n],e)})},_initData:function(){var e=this,t=this.$options.data;t=this._data="function"==typeof t?t():t||{},Object.keys(t).forEach(function(t){e._proxy(e,"_data",t)}),(0,r.default)(this._data)},_initWatch:function(){var e=this;if(this.$options.watch){var t=this.$options.watch;Object.keys(t).forEach(function(n){e.$watch(n,t[n])})}},_initComputed:function(){var e=this;if(this.$options.computed){var t=this.$options.computed;Object.keys(t).forEach(function(n){Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(e,t){var n=new o.Watcher(t,e,null,{lazy:!0});return function(){return n.dirty&&n.evaluate(),u.default.target&&n.depend(),n.value}}(t[n],e),set:h})})}},_initEvents:function(){var e=this.$options;e._asComponent&&function(e,t){var n=/^(v-on:|@)/,i=void 0,r=void 0,o=void 0;(0,s.toArray)(t.attributes).forEach(function(t){i=t.name.trim(),r=t.value.trim(),n.test(i)&&(i=i.replace(n,""),r+=".apply(this, this.$arguments)",o=function(e,t){var n=new Function("vm","return vm."+t);return function(){e.$arguments=(0,s.toArray)(arguments);var t=n.call(e,e);return e.$arguments=null,t}}(e._context,r),e.$on(i,o))})}(this,e.el)},_proxy:function(e,t,n){var i={enumerable:!0,configurable:!0,get:function(){return this[t][n]},set:function(e){this[t][n]=e}};Object.defineProperty(e,n,i)},$set:function(e,t,n){this[e][t]=n,vm[e].__ob__.dep.notify()},$delete:function(e,t){(0,s.isArray)(this[e])?this[e].splice(t,1):(delete this[e][t],vm[e].__ob__.dep.notify())},$watch:function(e,t,n){new o.Watcher(this,e,t,n)},$on:function(e,t){(this._events[e]||(this._events[e]=[])).push(t)},$off:function(e,t){var n=this._events[e];if(t)for(var i=n.length;i--;){n[i]===t&&n.splice(i,1)}else n.length=0},$emit:function(e){var t=this,n=this._events[e],i=(0,s.toArray)(arguments,1);n?i.length>1?n.forEach(function(e){e.apply(t,i)}):n.forEach(function(e){e.call(t,i[0])}):this._events[e]=[]},$once:function(e,t){var n=this;this.$on(e,function i(){n.$off(e,i),t.apply(this,arguments)})},$nextTick:o.nextTick,_applyFilters:function(e,t){var n=this,i=this.$options.filters?this.$options.filters:{},r=void 0;return t.forEach(function(t){(r=i[t.name])&&(e=r.call(n,e))}),e},_callHook:function(e){var t=this,n=this.$options[e];"function"==typeof n?n.call(this):n&&n.forEach(function(e){e.call(t)})},_compile:function(){var e=this.$options;e.el=this.$el=(0,s.query)(e.el);var t=function(e,t){if(t.template){t._content=m(e);var n=t.template.trim(),i=document.createElement("div");i.innerHTML=n;var r=m(i,!0),o=(r=r.cloneNode(!0)).firstChild;return function(e,t){var n=e.attributes,i=n.length,r=void 0,o=void 0;for(;i--;)r=n[i].name,o=n[i].value.trim(),t.hasAttribute(r)||p.test(r)?"class"===r&&o.split(/\s+/).forEach(function(e){(0,s.addClass)(t,e)}):t.setAttribute(r,o)}(e,o),o}}(this.$el,e);t&&(this.$el=t,e.el.innerHTML="",(0,s.replace)(e.el,this.$el)),function(e,t){if(!t)return;var n=e._slotContents=Object.create(null),i=void 0;for(i in(0,s.toArray)(t.children).forEach(function(e){(i=e.getAttribute("slot"))&&(n[i]||(n[i]=[])).push(e)}),n)n[i]=y(n[i],t);if(t.hasChildNodes()){var r=t.childNodes;if(1===r.length&&3===r[0].nodeType&&!r[0].data.trim())return;n.default=y(t.childNodes,t)}}(this,e._content),this._callHook("beforeCompile"),(0,c.compile)(this,this.$el)}},window.MiniVue=d;var p=/[^\w\-:\.]/;var v=/(?:^|[-_\/])(\w)/g;function m(e,t){var n=void 0,i=void 0;if(e.hasChildNodes())for((0,s.trimNode)(e),i=t?document.createDocumentFragment():document.createElement("div");n=e.firstChild;)i.appendChild(n);return i}function y(e,t){var n=document.createDocumentFragment(),i=void 0;return(e=(0,s.toArray)(e)).forEach(function(e){(0,s.isTrimmable)(e)||(t.removeChild(e),(i=document.createElement("div")).innerHTML=e.innerHTML,(0,s.trimNode)(i),(0,s.toArray)(i.childNodes).forEach(function(e){n.appendChild(e)}))}),n}},"./src/observer.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=a,t.defineReactive=l;var r=function(e){return e&&e.__esModule?e:{default:e}}(n("./src/dep.js")),o=n("./src/utils.js");var s=Array.prototype,c=Object.create(s);function a(e){if(e&&"object"===(void 0===e?"undefined":i(e))){var t=void 0;return(0,o.hasOwn)(e,"__ob__")&&e.__ob__ instanceof u?t=e.__ob__:e._isVue||(t=new u(e)),t}}function u(e){this.value=e,this.dep=new r.default,(0,o.def)(e,"__ob__",this),(0,o.isArray)(e)?(e.__proto__=c,this.observeArray(e)):this.walk(e)}function l(e,t,n){var i=new r.default,s=a(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){if(r.default.target&&(i.depend(),s&&s.dep.depend(),(0,o.isArray)(n)))for(var e,t=0,c=n.length;t<c;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend();return n},set:function(e){n!==e&&(n=e,s=a(e),i.notify())}})}["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(e){var t=s[e];(0,o.def)(c,e,function(){for(var n=arguments.length,i=Array(n),r=0;r<n;r++)i[r]=arguments[r];var o=t.apply(this,i),s=this.__ob__,c=void 0;switch(e){case"push":case"unshift":c=i;break;case"splice":c=i.slice(2)}return c&&s.observeArray(c),s.dep.notify(),o})}),u.prototype={walk:function(e){for(var t=Object.keys(e),n=0,i=t.length;n<i;n++)l(e,t[n],e[t[n]])},observeArray:function(e){e.forEach(function(e){a(e)})}}},"./src/utils.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.toArray=function(e,t){return t=t||0,[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(e)).slice(t)},t.replace=function(e,t){var n=e.parentNode;n&&n.replaceChild(t,e)},t.extend=function(e,t){var n=Object.keys(t),i=n.length;for(;i--;)e[n[i]]=t[n[i]];return e},t.on=function(e,t,n,i){e.addEventListener(t,n,i)},t.off=function(e,t,n){e.removeEventListener(t,n)},t.bind=function(e,t){return function(n){var i=arguments.length;return i?i>1?e.apply(t,arguments):e.call(t,n):e.call(t)}},t.def=function(e,t,n,i){Object.defineProperty(e,t,{value:n,enumerable:!!i,writable:!0,configurable:!0})},t.hasOwn=function(e,t){return hasOwnProperty.call(e,t)},t.isObject=function(e){return null!==e&&"object"===(void 0===e?"undefined":i(e))},t.getAttr=o,t.getBindAttr=function(e,t){var n=o(e,":"+t);null===n&&(n=o(e,"v-bind:"+t));return n},t.remove=function(e){e.parentNode.removeChild(e)},t.insert=function(e,t){t.parentNode.insertBefore(e,t)},t.addClass=function(e,t){e.classList.add(t)},t.query=function(e){return"string"==typeof e?document.querySelector(e):e},t.makeGetterFn=function(e){return new Function("vm","return vm."+e)},t.firstWordtoUpper=function(e){return e.substring(0,1).toUpperCase()+e.substring(1)},t.trimNode=function(e){var t=void 0;for(;s(t=e.firstChild);)e.removeChild(t);for(;s(t=e.lastChild);)e.removeChild(t)},t.isTrimmable=s,t.toUpper=function(e,t){return t?t.toUpperCase():""},t.deepCopy=function e(t){if("object"!=(void 0===t?"undefined":i(t)))return t;var n={};r(t)&&(n=[]);for(var o in t)n[o]=e(t[o]);return n};var r=Array.isArray;function o(e,t){var n=e.getAttribute(t);return null!==n&&e.removeAttribute(t),n}function s(e){return e&&(3===e.nodeType&&!e.data.trim()||8===e.nodeType)}t.isArray=r},"./src/watcher.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Watcher=s,t.nextTick=d;var i=function(e){return e&&e.__esModule?e:{default:e}}(n("./src/dep.js")),r=n("./src/utils.js");var o=0;function s(e,t,n,i){if(e._watchers.push(this),i&&(0,r.extend)(this,i),this.id=o++,this.vm=e,this.expression=t,this.sync=!!i&&i.sync,this.dirty=this.lazy,this.deps=[],this.depIds=new Set,this.cb=n,"function"==typeof t)this.getter=t,this.setter=void 0;else{var s=function(e){var t={exp:e=e.trim()};return t.get=(0,r.makeGetterFn)(e),t}(t);this.getter=s.get,this.setter=function(n){e[t]=n}}this.value=this.get()}s.prototype={get:function(){var e=this.vm;i.default.target=this;var t=this.getter.call(e,e);return this.filters&&(t=e._applyFilters(t,this.filters)),i.default.target=null,t},set:function(e){this.setter.call(this.vm,e)},update:function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;null==a[t]&&(a[t]=c.length,c.push(e));u||(u=!0,d(l))}(this)},run:function(){var e=this.get(),t=this.value;this.value=e,(e!==t||(0,r.isObject)(e))&&this.cb.call(this.vm,e,t)},addDep:function(e){this.depIds.has(e.id)||(this.deps.push(e),this.depIds.add(e.id),e.addSub(this))},teardown:function(){this.vm._watchers.splice(this.vm._watchers.indexOf(this),1);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.vm=this.cb=this.value=null},evaluate:function(){var e=i.default.target;this.value=this.get(),this.dirty=!1,i.default.target=e},depend:function(){this.deps.forEach(function(e){e.depend()})}};var c=[],a={},u=!1;function l(){c.forEach(function(e){e.run()}),u=!1,a={},c.length=0}function d(e,t){Promise.resolve().then(function(){t?e.call(t):e()})}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RlcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZGlyZWN0aXZlLmpzIiwid2VicGFjazovLy8uL3NyYy9kaXJlY3RpdmVzLmpzIiwid2VicGFjazovLy8uL3NyYy9tYWluLmpzIiwid2VicGFjazovLy8uL3NyYy9vYnNlcnZlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3dhdGNoZXIuanMiXSwibmFtZXMiOlsicGFyZW50SG90VXBkYXRlQ2FsbGJhY2siLCJ3aW5kb3ciLCJjaHVua0lkIiwibW9yZU1vZHVsZXMiLCJob3RBdmFpbGFibGVGaWxlc01hcCIsImhvdFJlcXVlc3RlZEZpbGVzTWFwIiwibW9kdWxlSWQiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJob3RVcGRhdGUiLCJob3RXYWl0aW5nRmlsZXMiLCJob3RDaHVua3NMb2FkaW5nIiwiaG90VXBkYXRlRG93bmxvYWRlZCIsImhvdEFkZFVwZGF0ZUNodW5rIiwiaG90Q3VycmVudENoaWxkTW9kdWxlIiwiaG90QXBwbHlPblVwZGF0ZSIsImhvdEN1cnJlbnRIYXNoIiwiaG90UmVxdWVzdFRpbWVvdXQiLCJob3RDdXJyZW50TW9kdWxlRGF0YSIsImhvdEN1cnJlbnRQYXJlbnRzIiwiaG90Q3VycmVudFBhcmVudHNUZW1wIiwiaG90Q3JlYXRlUmVxdWlyZSIsIm1lIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJmbiIsInJlcXVlc3QiLCJob3QiLCJhY3RpdmUiLCJwYXJlbnRzIiwiaW5kZXhPZiIsInB1c2giLCJjaGlsZHJlbiIsImNvbnNvbGUiLCJ3YXJuIiwiT2JqZWN0RmFjdG9yeSIsIm5hbWUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwic2V0IiwidmFsdWUiLCJkZWZpbmVQcm9wZXJ0eSIsImUiLCJob3RTdGF0dXMiLCJob3RTZXRTdGF0dXMiLCJ0aGVuIiwiZmluaXNoQ2h1bmtMb2FkaW5nIiwiZXJyIiwiaG90V2FpdGluZ0ZpbGVzTWFwIiwiaG90RW5zdXJlVXBkYXRlQ2h1bmsiLCJ0IiwibW9kZSIsImhvdFN0YXR1c0hhbmRsZXJzIiwibmV3U3RhdHVzIiwiaSIsImxlbmd0aCIsImhvdERlZmVycmVkIiwiaG90VXBkYXRlTmV3SGFzaCIsInRvTW9kdWxlSWQiLCJpZCIsImhvdENoZWNrIiwiYXBwbHkiLCJFcnJvciIsInJlcXVlc3RUaW1lb3V0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJYTUxIdHRwUmVxdWVzdCIsInJlcXVlc3RQYXRoIiwicCIsIm9wZW4iLCJ0aW1lb3V0Iiwic2VuZCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJ1cGRhdGUiLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJob3REb3dubG9hZE1hbmlmZXN0IiwiYyIsImgiLCJwcm9taXNlIiwiaGVhZCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwiY2hhcnNldCIsInNyYyIsImFwcGVuZENoaWxkIiwiaG90RG93bmxvYWRVcGRhdGVDaHVuayIsImRlZmVycmVkIiwiaG90QXBwbHkiLCJyZXN1bHQiLCJvdXRkYXRlZE1vZHVsZXMiLCJvcHRpb25zIiwiY2IiLCJqIiwibW9kdWxlIiwiZ2V0QWZmZWN0ZWRTdHVmZiIsInVwZGF0ZU1vZHVsZUlkIiwib3V0ZGF0ZWREZXBlbmRlbmNpZXMiLCJxdWV1ZSIsInNsaWNlIiwibWFwIiwiY2hhaW4iLCJxdWV1ZUl0ZW0iLCJwb3AiLCJfc2VsZkFjY2VwdGVkIiwiX3NlbGZEZWNsaW5lZCIsInR5cGUiLCJfbWFpbiIsInBhcmVudElkIiwicGFyZW50IiwiX2RlY2xpbmVkRGVwZW5kZW5jaWVzIiwiY29uY2F0IiwiX2FjY2VwdGVkRGVwZW5kZW5jaWVzIiwiYWRkQWxsVG9TZXQiLCJhIiwiYiIsIml0ZW0iLCJhcHBsaWVkVXBkYXRlIiwid2FyblVuZXhwZWN0ZWRSZXF1aXJlIiwiYWJvcnRFcnJvciIsImRvQXBwbHkiLCJkb0Rpc3Bvc2UiLCJjaGFpbkluZm8iLCJqb2luIiwib25EZWNsaW5lZCIsImlnbm9yZURlY2xpbmVkIiwib25VbmFjY2VwdGVkIiwiaWdub3JlVW5hY2NlcHRlZCIsIm9uQWNjZXB0ZWQiLCJvbkRpc3Bvc2VkIiwiaWR4Iiwib3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzIiwiZXJyb3JIYW5kbGVyIiwia2V5cyIsImZvckVhY2giLCJpbnN0YWxsZWRDaHVua3MiLCJob3REaXNwb3NlQ2h1bmsiLCJkZXBlbmRlbmN5IiwibW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMiLCJkYXRhIiwiZGlzcG9zZUhhbmRsZXJzIiwiX2Rpc3Bvc2VIYW5kbGVycyIsImNoaWxkIiwic3BsaWNlIiwibW9kdWxlcyIsImVycm9yIiwiY2FsbGJhY2tzIiwib25FcnJvcmVkIiwiZGVwZW5kZW5jeUlkIiwiaWdub3JlRXJyb3JlZCIsImVycjIiLCJvcmlnaW5hbEVycm9yIiwiZXhwb3J0cyIsImwiLCJhY2NlcHQiLCJkZXAiLCJjYWxsYmFjayIsInVuZGVmaW5lZCIsImRlY2xpbmUiLCJkaXNwb3NlIiwiYWRkRGlzcG9zZUhhbmRsZXIiLCJyZW1vdmVEaXNwb3NlSGFuZGxlciIsImNoZWNrIiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJob3RDcmVhdGVNb2R1bGUiLCJtIiwiZCIsImdldHRlciIsIm8iLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicyIsImNvbXBpbGUiLCJ2bSIsImVsIiwiY29tcGlsZU5vZGUiLCJoYXNDaGlsZE5vZGVzIiwiY29tcGlsZU5vZGVMaXN0Iiwibm9kZXMiLCJub2RlIiwiY2hpbGROb2RlcyIsInBlbmRpbmciLCJkaXIiLCJkZXNjcmlwdG9yIiwiZGVzIiwiZGVmIiwicHJpb3JpdHkiLCJzb3J0Iiwic29ydERlc2NyaXB0b3JzIiwic2hpZnQiLCJEaXJlY3RpdmUiLCJfYmluZCIsIl9kaXJlY3RpdmVzIiwiX2NhbGxIb29rIiwic2V0VGltZW91dCIsImJvZHkiLCJjb250YWlucyIsImRpcnMiLCJhdHRyIiwidGVtcCIsIl90ZWFyZG93biIsInRlYXJkb3duIiwiY29tcGlsZVByb3BzIiwicHJvcHNPcHRpb25zIiwiZGlyZWN0aXZlcyIsIiRvcHRpb25zIiwicHJvcHMiLCJwcm9wIiwicGF0aCIsIl91dGlscyIsImdldEJpbmRBdHRyIiwiZHluYW1pYyIsInJhdyIsInBhcmVudFBhdGgiLCJnZXRBdHRyIiwiX3Byb3BzIiwiX2NvbnRleHQiLCJfb2JzZXJ2ZXIiLCJkZWZpbmVSZWFjdGl2ZSIsIm5vZGVUeXBlIiwidGFnIiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwiY29tbW9uVGFnUkUiLCJ0ZXN0IiwicmVzZXJ2ZWRUYWdSRSIsImFyZyIsImV4cHJlc3Npb24iLCJzbG90IiwiaGFzQXR0cmlidXRlcyIsIm1hdGNoZWQiLCJpc0ZvciIsImF0dHJzIiwidG9BcnJheSIsImF0dHJpYnV0ZXMiLCJ0cmltIiwib25SZSIsInJlbW92ZUF0dHJpYnV0ZSIsInJlcGxhY2UiLCJvbiIsImJpbmRSZSIsInZhbHVlcyIsInNwbGl0IiwiZmlsdGVycyIsIm1hdGNoIiwiZGlyQXR0clJFIiwidGV4dCIsImNvbXBvbmVudHMiLCJjb21wb25lbnQiLCJtb2RpZmllcnMiLCJsaXRlcmFsIiwiY29tcGlsZUVsZW1lbnQiLCJ0b2tlbnMiLCJpbmRleCIsImxhc3RJbmRleCIsInRhZ1JFIiwiZXhlYyIsInBhcnNlVGV4dCIsIm5vZGVWYWx1ZSIsImZyYWciLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwidG9rZW4iLCJjcmVhdGVUZXh0Tm9kZSIsInByb2Nlc3NUZXh0VG9rZW4iLCJjb21waWxlVGV4dE5vZGUiLCJEZXAiLCJ1aWQiLCJ0aGlzIiwic3VicyIsInRhcmdldCIsImRlcGVuZCIsImFkZERlcCIsImFkZFN1YiIsInN1YiIsInJlbW92ZVN1YiIsIm5vdGlmeSIsIndhdGNoZXIiLCJfd2F0Y2hlciIsImV4dGVuZCIsIl91cGRhdGUiLCJvbGRWYWwiLCJXYXRjaGVyIiwidW5iaW5kIiwiX2NvbXBpbGUiLCJoYW5kbGVycyIsInNlbGYiLCJsaXN0ZW5lciIsIm9mZiIsInNlbGVjdCIsIl90aGlzIiwibXVsdGlwbGUiLCJoYXNBdHRyaWJ1dGUiLCJnZXRWYWx1ZSIsInNlbGVjdGVkSW5kZXgiLCJtdWx0aSIsImlzQXJyYXkiLCJvcCIsInZhbCIsInNlbGVjdGVkIiwicmFkaW8iLCJjaGVja2VkIiwiY2hlY2tib3giLCJpc0NoZWNrZWQiLCJpbml0IiwicmVzIiwiaGFuZGxlciIsInNldEF0dHJpYnV0ZSIsIm1vZGVsIiwiaHRtbCIsImlubmVySFRNTCIsInNob3ciLCJzdHlsZSIsImRpc3BsYXkiLCJpZiIsIm5leHQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJyZW1vdmUiLCJlbHNlRWwiLCJhbmNob3IiLCJpc0ZpcnN0IiwiX3RoaXMyIiwiY2xvbmVFbHNlRWwiLCJjbG9uZUVsIiwiY2xvbmVOb2RlIiwiaW5zZXJ0IiwiZm9yIiwibWF0Y2gxIiwidmFsdWVLZXkiLCJpbmRleEtleSIsImxlbiIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJyZTEiLCJyZTIiLCJfdHlwZW9mIiwiUmVnRXhwIiwiYnVpbGQiLCIkZWwiLCJDb21wb25lbnQiLCJfYXNDb21wb25lbnQiLCJwYXJlbnRLZXkiLCJwYXJlbnRXYXRjaGVyIiwic3luYyIsImNvbnRlbnQiLCJfc2xvdENvbnRlbnRzIiwiX2NvbXBpbGUyIiwiTWluaVZ1ZSIsIl9pbml0Iiwibm9vcCIsIm1lcmdlT3B0aW9ucyIsImRlZXBDb3B5IiwiaGFzT3duIiwibWl4aW4iLCJkaXJlY3RpdmUiLCJkaXJOYW1lIiwidXNlIiwicGx1Z2luIiwiaW5zdGFsbGVkIiwiYXJncyIsImFyZ3VtZW50cyIsInVuc2hpZnQiLCJpbnN0YWxsIiwiY2lkIiwiZXh0ZW5kT3B0aW9ucyIsImlzRmlyc3RFeHRlbmQiLCJfQ3RvciIsIlN1YiIsIkZ1bmN0aW9uIiwic3RyIiwiY2xhc3NpZnlSRSIsInRvVXBwZXIiLCJjbGFzc2lmeSIsImNvbnN0cnVjdG9yIiwiZGVmaW5pdGlvbiIsImlzUHJpdmF0ZSIsImZpbHRlciIsIiRwYXJlbnQiLCJfaXNNaW5pVnVlIiwiJHJvb3QiLCIkY2hpbGRyZW4iLCJfd2F0Y2hlcnMiLCJfZXZlbnRzIiwiX2luaXRNaXhpbnMiLCJfaW5pdENvbXBvbmVudHMiLCJfaW5pdFByb3BzIiwiX2luaXRNZXRob2RzIiwiX2luaXREYXRhIiwiX2luaXRXYXRjaCIsIl9pbml0Q29tcHV0ZWQiLCJfaW5pdEV2ZW50cyIsInF1ZXJ5IiwibWV0aG9kcyIsIl9kYXRhIiwiX3Byb3h5IiwiX29ic2VydmVyMiIsImRlZmF1bHQiLCJfdGhpczMiLCJ3YXRjaCIsIiR3YXRjaCIsIl90aGlzNCIsImNvbXB1dGVkIiwibGF6eSIsImRpcnR5IiwiZXZhbHVhdGUiLCJtYWtlQ29tcHV0ZWRHZXR0ZXIiLCIkYXJndW1lbnRzIiwic3RhdGVtZW50SGFuZGxlciIsIiRvbiIsInJlZ2lzdGVyQ29tcG9uZW50RXZlbnRzIiwic291cmNlS2V5Iiwic2hhcmVkUHJvcGVydHlEZWZpbml0aW9uIiwiJHNldCIsIm9iaiIsIl9fb2JfXyIsIiRkZWxldGUiLCJleHBPckZuIiwiZXZlbnQiLCIkb2ZmIiwiY2JzIiwiJGVtaXQiLCJfdGhpczUiLCIkb25jZSIsIiRuZXh0VGljayIsIm5leHRUaWNrIiwiX2FwcGx5RmlsdGVycyIsIl90aGlzNiIsImZpbHRlcnNPYmoiLCJob29rIiwiX3RoaXM3IiwidGVtcEVsIiwidGVtcGxhdGUiLCJfY29udGVudCIsImV4dHJhY3RDb250ZW50IiwicmVwbGFjZXIiLCJmaXJzdENoaWxkIiwiZnJvbSIsInRvIiwic3BlY2lhbENoYXJSRSIsImNscyIsImFkZENsYXNzIiwibWVyZ2VBdHRycyIsInRyYW5zY2x1ZGUiLCJjb250ZW50cyIsImdldEF0dHJpYnV0ZSIsImV4dHJhY3RGcmFnbWVudCIsInJlc29sdmVTbG90cyIsImFzRnJhZ21lbnQiLCJyYXdDb250ZW50IiwidHJpbU5vZGUiLCJkaXYiLCJpc1RyaW1tYWJsZSIsInJlbW92ZUNoaWxkIiwib2JzZXJ2ZSIsImFycmF5UHJvdG8iLCJBcnJheSIsImFycmF5TWV0aG9kcyIsIm9iIiwiT2JzZXJ2ZXIiLCJfaXNWdWUiLCJfX3Byb3RvX18iLCJvYnNlcnZlQXJyYXkiLCJ3YWxrIiwiY2hpbGRPYiIsIm5ld1ZhbCIsIm1ldGhvZCIsIm9yaWdpbmFsIiwiX2xlbiIsIl9rZXkiLCJpbnNlcnRlZCIsImFycnkiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJvbGROb2RlIiwibmV3Tm9kZSIsInBhcmVudE5vZGUiLCJyZXBsYWNlQ2hpbGQiLCJ1c2VDYXB0dXJlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjdHgiLCJ3cml0YWJsZSIsImlzT2JqZWN0IiwiaW5zZXJ0QmVmb3JlIiwiY2xhc3NMaXN0IiwiYWRkIiwicXVlcnlTZWxlY3RvciIsIm1ha2VHZXR0ZXJGbiIsImZpcnN0V29yZHRvVXBwZXIiLCJzdWJzdHJpbmciLCJ0b1VwcGVyQ2FzZSIsImxhc3RDaGlsZCIsIl8iLCJuZXdvYmoiLCJfYXR0ciIsImRlcHMiLCJkZXBJZHMiLCJTZXQiLCJzZXR0ZXIiLCJleHAiLCJwYXJzZUV4cHJlc3Npb24iLCJydW4iLCJoYXMiLCJ3YWl0aW5nIiwiZmx1c2hRdWV1ZSIsInB1c2hXYXRjaGVyIiwib2xkVmFsdWUiLCJjdXJyZW50IiwicSJdLCJtYXBwaW5ncyI6ImFBR0EsSUFBQUEsRUFBQUMsT0FBQSxpQkFDQUEsT0FBQSxpQkFDQSxTQUFBQyxFQUFBQyxJQWlSQSxTQUFBRCxFQUFBQyxHQUNBLElBQUFDLEVB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R0FBRzRPLFVBQVVQLE1BRXpCQSxLQUFLOUYsR0FBSzhGLEtBQUt6TCxHQUFLeUwsS0FBS25QLE1BQVEsTUFHckMwWCxTQTlEZ0IsV0ErRFosSUFBTXNHLEVBQVUvTyxVQUFJSSxPQUNwQkYsS0FBS25QLE1BQVFtUCxLQUFLclAsTUFDbEJxUCxLQUFLc0ksT0FBUSxFQUNieEksVUFBSUksT0FBUzJPLEdBR2pCMU8sT0FyRWdCLFdBc0VaSCxLQUFLaU8sS0FBS2hYLFFBQVEsU0FBQXFCLEdBQ2RBLEVBQUk2SCxhQWFoQixJQUFNdEwsS0FDRjJaLEtBQ0FDLEdBQVUsRUFnQmQsU0FBU0MsSUFDTDdaLEVBQU1vQyxRQUFRLFNBQUE2WCxHQUNWQSxFQUFFUCxRQUlORSxHQUFVLEVBQ1ZELEtBQ0EzWixFQUFNakQsT0FBUyxFQUdaLFNBQVMrWCxFQUFTcFYsRUFBSTJZLEdBQ2Y3YSxRQUFRQyxVQUNoQnBCLEtBQUssV0FDSGdjLEVBQUszWSxFQUFHM0YsS0FBS3NlLEdBQU8zWSIsImZpbGUiOiJtaW5pLXZ1ZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHRmdW5jdGlvbiBob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHRkZWxldGUgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuIFx0fVxuIFx0dmFyIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrID0gd2luZG93W1wid2VicGFja0hvdFVwZGF0ZVwiXTtcbiBcdHdpbmRvd1tcIndlYnBhY2tIb3RVcGRhdGVcIl0gPSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIHdlYnBhY2tIb3RVcGRhdGVDYWxsYmFjayhjaHVua0lkLCBtb3JlTW9kdWxlcykge1xuIFx0XHRob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XG4gXHRcdGlmIChwYXJlbnRIb3RVcGRhdGVDYWxsYmFjaykgcGFyZW50SG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xuIFx0fSA7XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4gXHRcdHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xuIFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiBcdFx0c2NyaXB0LmNoYXJzZXQgPSBcInV0Zi04XCI7XG4gXHRcdHNjcmlwdC5zcmMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG4gXHRcdDtcbiBcdFx0aGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdERvd25sb2FkTWFuaWZlc3QocmVxdWVzdFRpbWVvdXQpIHtcbiBcdFx0cmVxdWVzdFRpbWVvdXQgPSByZXF1ZXN0VGltZW91dCB8fCAxMDAwMDtcbiBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgPT09IFwidW5kZWZpbmVkXCIpIHtcbiBcdFx0XHRcdHJldHVybiByZWplY3QobmV3IEVycm9yKFwiTm8gYnJvd3NlciBzdXBwb3J0XCIpKTtcbiBcdFx0XHR9XG4gXHRcdFx0dHJ5IHtcbiBcdFx0XHRcdHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gXHRcdFx0XHR2YXIgcmVxdWVzdFBhdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzb25cIjtcbiBcdFx0XHRcdHJlcXVlc3Qub3BlbihcIkdFVFwiLCByZXF1ZXN0UGF0aCwgdHJ1ZSk7XG4gXHRcdFx0XHRyZXF1ZXN0LnRpbWVvdXQgPSByZXF1ZXN0VGltZW91dDtcbiBcdFx0XHRcdHJlcXVlc3Quc2VuZChudWxsKTtcbiBcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdHJldHVybiByZWplY3QoZXJyKTtcbiBcdFx0XHR9XG4gXHRcdFx0cmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiBcdFx0XHRcdGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHJldHVybjtcbiBcdFx0XHRcdGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCkge1xuIFx0XHRcdFx0XHQvLyB0aW1lb3V0XG4gXHRcdFx0XHRcdHJlamVjdChcbiBcdFx0XHRcdFx0XHRuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiB0aW1lZCBvdXQuXCIpXG4gXHRcdFx0XHRcdCk7XG4gXHRcdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzID09PSA0MDQpIHtcbiBcdFx0XHRcdFx0Ly8gbm8gdXBkYXRlIGF2YWlsYWJsZVxuIFx0XHRcdFx0XHRyZXNvbHZlKCk7XG4gXHRcdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzICE9PSAyMDAgJiYgcmVxdWVzdC5zdGF0dXMgIT09IDMwNCkge1xuIFx0XHRcdFx0XHQvLyBvdGhlciBmYWlsdXJlXG4gXHRcdFx0XHRcdHJlamVjdChuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiBmYWlsZWQuXCIpKTtcbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdC8vIHN1Y2Nlc3NcbiBcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHR2YXIgdXBkYXRlID0gSlNPTi5wYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcbiBcdFx0XHRcdFx0XHRyZWplY3QoZSk7XG4gXHRcdFx0XHRcdFx0cmV0dXJuO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdHJlc29sdmUodXBkYXRlKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9O1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0dmFyIGhvdEFwcGx5T25VcGRhdGUgPSB0cnVlO1xuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudEhhc2ggPSBcIjI5MGFhMWZlZWQzMzUwOTYyZjBhXCI7XG4gXHR2YXIgaG90UmVxdWVzdFRpbWVvdXQgPSAxMDAwMDtcbiBcdHZhciBob3RDdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xuIFx0dmFyIGhvdEN1cnJlbnRDaGlsZE1vZHVsZTtcbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzID0gW107XG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50UGFyZW50c1RlbXAgPSBbXTtcblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSB7XG4gXHRcdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRpZiAoIW1lKSByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXztcbiBcdFx0dmFyIGZuID0gZnVuY3Rpb24ocmVxdWVzdCkge1xuIFx0XHRcdGlmIChtZS5ob3QuYWN0aXZlKSB7XG4gXHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xuIFx0XHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpID09PSAtMSkge1xuIFx0XHRcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSByZXF1ZXN0O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKG1lLmNoaWxkcmVuLmluZGV4T2YocmVxdWVzdCkgPT09IC0xKSB7XG4gXHRcdFx0XHRcdG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdGNvbnNvbGUud2FybihcbiBcdFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgK1xuIFx0XHRcdFx0XHRcdHJlcXVlc3QgK1xuIFx0XHRcdFx0XHRcdFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWRcbiBcdFx0XHRcdCk7XG4gXHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFtdO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhyZXF1ZXN0KTtcbiBcdFx0fTtcbiBcdFx0dmFyIE9iamVjdEZhY3RvcnkgPSBmdW5jdGlvbiBPYmplY3RGYWN0b3J5KG5hbWUpIHtcbiBcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdO1xuIFx0XHRcdFx0fSxcbiBcdFx0XHRcdHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiBcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXSA9IHZhbHVlO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH07XG4gXHRcdH07XG4gXHRcdGZvciAodmFyIG5hbWUgaW4gX193ZWJwYWNrX3JlcXVpcmVfXykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfX3dlYnBhY2tfcmVxdWlyZV9fLCBuYW1lKSAmJlxuIFx0XHRcdFx0bmFtZSAhPT0gXCJlXCIgJiZcbiBcdFx0XHRcdG5hbWUgIT09IFwidFwiXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIE9iamVjdEZhY3RvcnkobmFtZSkpO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRmbi5lID0gZnVuY3Rpb24oY2h1bmtJZCkge1xuIFx0XHRcdGlmIChob3RTdGF0dXMgPT09IFwicmVhZHlcIikgaG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcbiBcdFx0XHRob3RDaHVua3NMb2FkaW5nKys7XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uZShjaHVua0lkKS50aGVuKGZpbmlzaENodW5rTG9hZGluZywgZnVuY3Rpb24oZXJyKSB7XG4gXHRcdFx0XHRmaW5pc2hDaHVua0xvYWRpbmcoKTtcbiBcdFx0XHRcdHRocm93IGVycjtcbiBcdFx0XHR9KTtcblxuIFx0XHRcdGZ1bmN0aW9uIGZpbmlzaENodW5rTG9hZGluZygpIHtcbiBcdFx0XHRcdGhvdENodW5rc0xvYWRpbmctLTtcbiBcdFx0XHRcdGlmIChob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiKSB7XG4gXHRcdFx0XHRcdGlmICghaG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiYgaG90V2FpdGluZ0ZpbGVzID09PSAwKSB7XG4gXHRcdFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9O1xuIFx0XHRmbi50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0XHRpZiAobW9kZSAmIDEpIHZhbHVlID0gZm4odmFsdWUpO1xuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLnQodmFsdWUsIG1vZGUgJiB+MSk7XG4gXHRcdH07XG4gXHRcdHJldHVybiBmbjtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpIHtcbiBcdFx0dmFyIGhvdCA9IHtcbiBcdFx0XHQvLyBwcml2YXRlIHN0dWZmXG4gXHRcdFx0X2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSxcbiBcdFx0XHRfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LFxuIFx0XHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxuIFx0XHRcdF9zZWxmRGVjbGluZWQ6IGZhbHNlLFxuIFx0XHRcdF9kaXNwb3NlSGFuZGxlcnM6IFtdLFxuIFx0XHRcdF9tYWluOiBob3RDdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkLFxuXG4gXHRcdFx0Ly8gTW9kdWxlIEFQSVxuIFx0XHRcdGFjdGl2ZTogdHJ1ZSxcbiBcdFx0XHRhY2NlcHQ6IGZ1bmN0aW9uKGRlcCwgY2FsbGJhY2spIHtcbiBcdFx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXG4gXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuIFx0XHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG4gXHRcdFx0XHRlbHNlIGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG4gXHRcdFx0fSxcbiBcdFx0XHRkZWNsaW5lOiBmdW5jdGlvbihkZXApIHtcbiBcdFx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmRGVjbGluZWQgPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcbiBcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG4gXHRcdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBbaV1dID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBdID0gdHJ1ZTtcbiBcdFx0XHR9LFxuIFx0XHRcdGRpc3Bvc2U6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcbiBcdFx0XHR9LFxuIFx0XHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG4gXHRcdFx0fSxcbiBcdFx0XHRyZW1vdmVEaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdHZhciBpZHggPSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5pbmRleE9mKGNhbGxiYWNrKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkgaG90Ll9kaXNwb3NlSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0fSxcblxuIFx0XHRcdC8vIE1hbmFnZW1lbnQgQVBJXG4gXHRcdFx0Y2hlY2s6IGhvdENoZWNrLFxuIFx0XHRcdGFwcGx5OiBob3RBcHBseSxcbiBcdFx0XHRzdGF0dXM6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdGlmICghbCkgcmV0dXJuIGhvdFN0YXR1cztcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG4gXHRcdFx0fSxcbiBcdFx0XHRhZGRTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuIFx0XHRcdH0sXG4gXHRcdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdFN0YXR1c0hhbmRsZXJzLmluZGV4T2YobCk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIGhvdFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdH0sXG5cbiBcdFx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcbiBcdFx0XHRkYXRhOiBob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF1cbiBcdFx0fTtcbiBcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gdW5kZWZpbmVkO1xuIFx0XHRyZXR1cm4gaG90O1xuIFx0fVxuXG4gXHR2YXIgaG90U3RhdHVzSGFuZGxlcnMgPSBbXTtcbiBcdHZhciBob3RTdGF0dXMgPSBcImlkbGVcIjtcblxuIFx0ZnVuY3Rpb24gaG90U2V0U3RhdHVzKG5ld1N0YXR1cykge1xuIFx0XHRob3RTdGF0dXMgPSBuZXdTdGF0dXM7XG4gXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgaG90U3RhdHVzSGFuZGxlcnMubGVuZ3RoOyBpKyspXG4gXHRcdFx0aG90U3RhdHVzSGFuZGxlcnNbaV0uY2FsbChudWxsLCBuZXdTdGF0dXMpO1xuIFx0fVxuXG4gXHQvLyB3aGlsZSBkb3dubG9hZGluZ1xuIFx0dmFyIGhvdFdhaXRpbmdGaWxlcyA9IDA7XG4gXHR2YXIgaG90Q2h1bmtzTG9hZGluZyA9IDA7XG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3RBdmFpbGFibGVGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdERlZmVycmVkO1xuXG4gXHQvLyBUaGUgdXBkYXRlIGluZm9cbiBcdHZhciBob3RVcGRhdGUsIGhvdFVwZGF0ZU5ld0hhc2g7XG5cbiBcdGZ1bmN0aW9uIHRvTW9kdWxlSWQoaWQpIHtcbiBcdFx0dmFyIGlzTnVtYmVyID0gK2lkICsgXCJcIiA9PT0gaWQ7XG4gXHRcdHJldHVybiBpc051bWJlciA/ICtpZCA6IGlkO1xuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RDaGVjayhhcHBseSkge1xuIFx0XHRpZiAoaG90U3RhdHVzICE9PSBcImlkbGVcIikge1xuIFx0XHRcdHRocm93IG5ldyBFcnJvcihcImNoZWNrKCkgaXMgb25seSBhbGxvd2VkIGluIGlkbGUgc3RhdHVzXCIpO1xuIFx0XHR9XG4gXHRcdGhvdEFwcGx5T25VcGRhdGUgPSBhcHBseTtcbiBcdFx0aG90U2V0U3RhdHVzKFwiY2hlY2tcIik7XG4gXHRcdHJldHVybiBob3REb3dubG9hZE1hbmlmZXN0KGhvdFJlcXVlc3RUaW1lb3V0KS50aGVuKGZ1bmN0aW9uKHVwZGF0ZSkge1xuIFx0XHRcdGlmICghdXBkYXRlKSB7XG4gXHRcdFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xuIFx0XHRcdFx0cmV0dXJuIG51bGw7XG4gXHRcdFx0fVxuIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzTWFwID0ge307XG4gXHRcdFx0aG90QXZhaWxhYmxlRmlsZXNNYXAgPSB1cGRhdGUuYztcbiBcdFx0XHRob3RVcGRhdGVOZXdIYXNoID0gdXBkYXRlLmg7XG5cbiBcdFx0XHRob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuIFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0XHRob3REZWZlcnJlZCA9IHtcbiBcdFx0XHRcdFx0cmVzb2x2ZTogcmVzb2x2ZSxcbiBcdFx0XHRcdFx0cmVqZWN0OiByZWplY3RcbiBcdFx0XHRcdH07XG4gXHRcdFx0fSk7XG4gXHRcdFx0aG90VXBkYXRlID0ge307XG4gXHRcdFx0dmFyIGNodW5rSWQgPSAwO1xuIFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lLWJsb2Nrc1xuIFx0XHRcdHtcbiBcdFx0XHRcdC8qZ2xvYmFscyBjaHVua0lkICovXG4gXHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0aG90U3RhdHVzID09PSBcInByZXBhcmVcIiAmJlxuIFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJlxuIFx0XHRcdFx0aG90V2FpdGluZ0ZpbGVzID09PSAwXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdFx0fVxuIFx0XHRcdHJldHVybiBwcm9taXNlO1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcykge1xuIFx0XHRpZiAoIWhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdIHx8ICFob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSlcbiBcdFx0XHRyZXR1cm47XG4gXHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gZmFsc2U7XG4gXHRcdGZvciAodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRob3RVcGRhdGVbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZiAoLS1ob3RXYWl0aW5nRmlsZXMgPT09IDAgJiYgaG90Q2h1bmtzTG9hZGluZyA9PT0gMCkge1xuIFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4gXHRcdGlmICghaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0pIHtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xuIFx0XHR9IGVsc2Uge1xuIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXMrKztcbiBcdFx0XHRob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdFVwZGF0ZURvd25sb2FkZWQoKSB7XG4gXHRcdGhvdFNldFN0YXR1cyhcInJlYWR5XCIpO1xuIFx0XHR2YXIgZGVmZXJyZWQgPSBob3REZWZlcnJlZDtcbiBcdFx0aG90RGVmZXJyZWQgPSBudWxsO1xuIFx0XHRpZiAoIWRlZmVycmVkKSByZXR1cm47XG4gXHRcdGlmIChob3RBcHBseU9uVXBkYXRlKSB7XG4gXHRcdFx0Ly8gV3JhcCBkZWZlcnJlZCBvYmplY3QgaW4gUHJvbWlzZSB0byBtYXJrIGl0IGFzIGEgd2VsbC1oYW5kbGVkIFByb21pc2UgdG9cbiBcdFx0XHQvLyBhdm9pZCB0cmlnZ2VyaW5nIHVuY2F1Z2h0IGV4Y2VwdGlvbiB3YXJuaW5nIGluIENocm9tZS5cbiBcdFx0XHQvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDY1NjY2XG4gXHRcdFx0UHJvbWlzZS5yZXNvbHZlKClcbiBcdFx0XHRcdC50aGVuKGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0XHRyZXR1cm4gaG90QXBwbHkoaG90QXBwbHlPblVwZGF0ZSk7XG4gXHRcdFx0XHR9KVxuIFx0XHRcdFx0LnRoZW4oXG4gXHRcdFx0XHRcdGZ1bmN0aW9uKHJlc3VsdCkge1xuIFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbiBcdFx0XHRcdFx0fSxcbiBcdFx0XHRcdFx0ZnVuY3Rpb24oZXJyKSB7XG4gXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0KGVycik7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdCk7XG4gXHRcdH0gZWxzZSB7XG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaCh0b01vZHVsZUlkKGlkKSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHRcdGRlZmVycmVkLnJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RBcHBseShvcHRpb25zKSB7XG4gXHRcdGlmIChob3RTdGF0dXMgIT09IFwicmVhZHlcIilcbiBcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJhcHBseSgpIGlzIG9ubHkgYWxsb3dlZCBpbiByZWFkeSBzdGF0dXNcIik7XG4gXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gXHRcdHZhciBjYjtcbiBcdFx0dmFyIGk7XG4gXHRcdHZhciBqO1xuIFx0XHR2YXIgbW9kdWxlO1xuIFx0XHR2YXIgbW9kdWxlSWQ7XG5cbiBcdFx0ZnVuY3Rpb24gZ2V0QWZmZWN0ZWRTdHVmZih1cGRhdGVNb2R1bGVJZCkge1xuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xuIFx0XHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXG4gXHRcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCkubWFwKGZ1bmN0aW9uKGlkKSB7XG4gXHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRjaGFpbjogW2lkXSxcbiBcdFx0XHRcdFx0aWQ6IGlkXG4gXHRcdFx0XHR9O1xuIFx0XHRcdH0pO1xuIFx0XHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gXHRcdFx0XHR2YXIgcXVldWVJdGVtID0gcXVldWUucG9wKCk7XG4gXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZUl0ZW0uaWQ7XG4gXHRcdFx0XHR2YXIgY2hhaW4gPSBxdWV1ZUl0ZW0uY2hhaW47XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmICghbW9kdWxlIHx8IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCkgY29udGludWU7XG4gXHRcdFx0XHRpZiAobW9kdWxlLmhvdC5fc2VsZkRlY2xpbmVkKSB7XG4gXHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWRlY2xpbmVkXCIsXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKG1vZHVsZS5ob3QuX21haW4pIHtcbiBcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcInVuYWNjZXB0ZWRcIixcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xuIFx0XHRcdFx0XHR2YXIgcGFyZW50ID0gaW5zdGFsbGVkTW9kdWxlc1twYXJlbnRJZF07XG4gXHRcdFx0XHRcdGlmICghcGFyZW50KSBjb250aW51ZTtcbiBcdFx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuIFx0XHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0XHR0eXBlOiBcImRlY2xpbmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0cGFyZW50SWQ6IHBhcmVudElkXG4gXHRcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAob3V0ZGF0ZWRNb2R1bGVzLmluZGV4T2YocGFyZW50SWQpICE9PSAtMSkgY29udGludWU7XG4gXHRcdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSlcbiBcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSA9IFtdO1xuIFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7XG4gXHRcdFx0XHRcdFx0Y29udGludWU7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXTtcbiBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gocGFyZW50SWQpO1xuIFx0XHRcdFx0XHRxdWV1ZS5wdXNoKHtcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuIFx0XHRcdFx0XHRcdGlkOiBwYXJlbnRJZFxuIFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG5cbiBcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0dHlwZTogXCJhY2NlcHRlZFwiLFxuIFx0XHRcdFx0bW9kdWxlSWQ6IHVwZGF0ZU1vZHVsZUlkLFxuIFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzOiBvdXRkYXRlZE1vZHVsZXMsXG4gXHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llczogb3V0ZGF0ZWREZXBlbmRlbmNpZXNcbiBcdFx0XHR9O1xuIFx0XHR9XG5cbiBcdFx0ZnVuY3Rpb24gYWRkQWxsVG9TZXQoYSwgYikge1xuIFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0dmFyIGl0ZW0gPSBiW2ldO1xuIFx0XHRcdFx0aWYgKGEuaW5kZXhPZihpdGVtKSA9PT0gLTEpIGEucHVzaChpdGVtKTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZFxuIFx0XHQvLyB0aGUgXCJvdXRkYXRlZFwiIHN0YXR1cyBjYW4gcHJvcGFnYXRlIHRvIHBhcmVudHMgaWYgdGhleSBkb24ndCBhY2NlcHQgdGhlIGNoaWxkcmVuXG4gXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuIFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG4gXHRcdHZhciBhcHBsaWVkVXBkYXRlID0ge307XG5cbiBcdFx0dmFyIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSA9IGZ1bmN0aW9uIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSgpIHtcbiBcdFx0XHRjb25zb2xlLndhcm4oXG4gXHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArIHJlc3VsdC5tb2R1bGVJZCArIFwiKSB0byBkaXNwb3NlZCBtb2R1bGVcIlxuIFx0XHRcdCk7XG4gXHRcdH07XG5cbiBcdFx0Zm9yICh2YXIgaWQgaW4gaG90VXBkYXRlKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuIFx0XHRcdFx0bW9kdWxlSWQgPSB0b01vZHVsZUlkKGlkKTtcbiBcdFx0XHRcdC8qKiBAdHlwZSB7VE9ET30gKi9cbiBcdFx0XHRcdHZhciByZXN1bHQ7XG4gXHRcdFx0XHRpZiAoaG90VXBkYXRlW2lkXSkge1xuIFx0XHRcdFx0XHRyZXN1bHQgPSBnZXRBZmZlY3RlZFN0dWZmKG1vZHVsZUlkKTtcbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdHJlc3VsdCA9IHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcImRpc3Bvc2VkXCIsXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IGlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHQvKiogQHR5cGUge0Vycm9yfGZhbHNlfSAqL1xuIFx0XHRcdFx0dmFyIGFib3J0RXJyb3IgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBkb0FwcGx5ID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgZG9EaXNwb3NlID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgY2hhaW5JbmZvID0gXCJcIjtcbiBcdFx0XHRcdGlmIChyZXN1bHQuY2hhaW4pIHtcbiBcdFx0XHRcdFx0Y2hhaW5JbmZvID0gXCJcXG5VcGRhdGUgcHJvcGFnYXRpb246IFwiICsgcmVzdWx0LmNoYWluLmpvaW4oXCIgLT4gXCIpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0c3dpdGNoIChyZXN1bHQudHlwZSkge1xuIFx0XHRcdFx0XHRjYXNlIFwic2VsZi1kZWNsaW5lZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIHNlbGYgZGVjbGluZTogXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiZGVjbGluZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBkZWNsaW5lZCBkZXBlbmRlbmN5OiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRcIiBpbiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0LnBhcmVudElkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJ1bmFjY2VwdGVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25VbmFjY2VwdGVkKSBvcHRpb25zLm9uVW5hY2NlcHRlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVVbmFjY2VwdGVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiICsgY2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiYWNjZXB0ZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkFjY2VwdGVkKSBvcHRpb25zLm9uQWNjZXB0ZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRkb0FwcGx5ID0gdHJ1ZTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EaXNwb3NlZCkgb3B0aW9ucy5vbkRpc3Bvc2VkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0ZG9EaXNwb3NlID0gdHJ1ZTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0ZGVmYXVsdDpcbiBcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmV4Y2VwdGlvbiB0eXBlIFwiICsgcmVzdWx0LnR5cGUpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGFib3J0RXJyb3IpIHtcbiBcdFx0XHRcdFx0aG90U2V0U3RhdHVzKFwiYWJvcnRcIik7XG4gXHRcdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChhYm9ydEVycm9yKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChkb0FwcGx5KSB7XG4gXHRcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gaG90VXBkYXRlW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCByZXN1bHQub3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0XHRcdFx0Zm9yIChtb2R1bGVJZCBpbiByZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRcdFx0XHRpZiAoXG4gXHRcdFx0XHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoXG4gXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcyxcbiBcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWRcbiBcdFx0XHRcdFx0XHRcdClcbiBcdFx0XHRcdFx0XHQpIHtcbiBcdFx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKVxuIFx0XHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0gPSBbXTtcbiBcdFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KFxuIFx0XHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0sXG4gXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF1cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoZG9EaXNwb3NlKSB7XG4gXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgW3Jlc3VsdC5tb2R1bGVJZF0pO1xuIFx0XHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IHdhcm5VbmV4cGVjdGVkUmVxdWlyZTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBTdG9yZSBzZWxmIGFjY2VwdGVkIG91dGRhdGVkIG1vZHVsZXMgdG8gcmVxdWlyZSB0aGVtIGxhdGVyIGJ5IHRoZSBtb2R1bGUgc3lzdGVtXG4gXHRcdHZhciBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMgPSBbXTtcbiBcdFx0Zm9yIChpID0gMDsgaSA8IG91dGRhdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdG1vZHVsZUlkID0gb3V0ZGF0ZWRNb2R1bGVzW2ldO1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdICYmXG4gXHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZFxuIFx0XHRcdClcbiBcdFx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcbiBcdFx0XHRcdFx0bW9kdWxlOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0ZXJyb3JIYW5kbGVyOiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZFxuIFx0XHRcdFx0fSk7XG4gXHRcdH1cblxuIFx0XHQvLyBOb3cgaW4gXCJkaXNwb3NlXCIgcGhhc2VcbiBcdFx0aG90U2V0U3RhdHVzKFwiZGlzcG9zZVwiKTtcbiBcdFx0T2JqZWN0LmtleXMoaG90QXZhaWxhYmxlRmlsZXNNYXApLmZvckVhY2goZnVuY3Rpb24oY2h1bmtJZCkge1xuIFx0XHRcdGlmIChob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSA9PT0gZmFsc2UpIHtcbiBcdFx0XHRcdGhvdERpc3Bvc2VDaHVuayhjaHVua0lkKTtcbiBcdFx0XHR9XG4gXHRcdH0pO1xuXG4gXHRcdHZhciBpZHg7XG4gXHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpO1xuIFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuIFx0XHRcdG1vZHVsZUlkID0gcXVldWUucG9wKCk7XG4gXHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0aWYgKCFtb2R1bGUpIGNvbnRpbnVlO1xuXG4gXHRcdFx0dmFyIGRhdGEgPSB7fTtcblxuIFx0XHRcdC8vIENhbGwgZGlzcG9zZSBoYW5kbGVyc1xuIFx0XHRcdHZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7XG4gXHRcdFx0Zm9yIChqID0gMDsgaiA8IGRpc3Bvc2VIYW5kbGVycy5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0Y2IgPSBkaXNwb3NlSGFuZGxlcnNbal07XG4gXHRcdFx0XHRjYihkYXRhKTtcbiBcdFx0XHR9XG4gXHRcdFx0aG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdID0gZGF0YTtcblxuIFx0XHRcdC8vIGRpc2FibGUgbW9kdWxlICh0aGlzIGRpc2FibGVzIHJlcXVpcmVzIGZyb20gdGhpcyBtb2R1bGUpXG4gXHRcdFx0bW9kdWxlLmhvdC5hY3RpdmUgPSBmYWxzZTtcblxuIFx0XHRcdC8vIHJlbW92ZSBtb2R1bGUgZnJvbSBjYWNoZVxuIFx0XHRcdGRlbGV0ZSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcblxuIFx0XHRcdC8vIHdoZW4gZGlzcG9zaW5nIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBkaXNwb3NlIGhhbmRsZXJcbiBcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuXG4gXHRcdFx0Ly8gcmVtb3ZlIFwicGFyZW50c1wiIHJlZmVyZW5jZXMgZnJvbSBhbGwgY2hpbGRyZW5cbiBcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHR2YXIgY2hpbGQgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZS5jaGlsZHJlbltqXV07XG4gXHRcdFx0XHRpZiAoIWNoaWxkKSBjb250aW51ZTtcbiBcdFx0XHRcdGlkeCA9IGNoaWxkLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIHtcbiBcdFx0XHRcdFx0Y2hpbGQucGFyZW50cy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlblxuIFx0XHR2YXIgZGVwZW5kZW5jeTtcbiBcdFx0dmFyIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzO1xuIFx0XHRmb3IgKG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZClcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuIFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuIFx0XHRcdFx0XHRcdGlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpO1xuIFx0XHRcdFx0XHRcdGlmIChpZHggPj0gMCkgbW9kdWxlLmNoaWxkcmVuLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTm90IGluIFwiYXBwbHlcIiBwaGFzZVxuIFx0XHRob3RTZXRTdGF0dXMoXCJhcHBseVwiKTtcblxuIFx0XHRob3RDdXJyZW50SGFzaCA9IGhvdFVwZGF0ZU5ld0hhc2g7XG5cbiBcdFx0Ly8gaW5zZXJ0IG5ldyBjb2RlXG4gXHRcdGZvciAobW9kdWxlSWQgaW4gYXBwbGllZFVwZGF0ZSkge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXBwbGllZFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIGNhbGwgYWNjZXB0IGhhbmRsZXJzXG4gXHRcdHZhciBlcnJvciA9IG51bGw7XG4gXHRcdGZvciAobW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKVxuIFx0XHRcdCkge1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAobW9kdWxlKSB7XG4gXHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gW107XG4gXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXTtcbiBcdFx0XHRcdFx0XHRjYiA9IG1vZHVsZS5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcGVuZGVuY3ldO1xuIFx0XHRcdFx0XHRcdGlmIChjYikge1xuIFx0XHRcdFx0XHRcdFx0aWYgKGNhbGxiYWNrcy5pbmRleE9mKGNiKSAhPT0gLTEpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzLnB1c2goY2IpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdFx0Y2IgPSBjYWxsYmFja3NbaV07XG4gXHRcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHRcdGNiKG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzKTtcbiBcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldLFxuIFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBMb2FkIHNlbGYgYWNjZXB0ZWQgbW9kdWxlc1xuIFx0XHRmb3IgKGkgPSAwOyBpIDwgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGl0ZW0gPSBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXNbaV07XG4gXHRcdFx0bW9kdWxlSWQgPSBpdGVtLm1vZHVsZTtcbiBcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG4gXHRcdFx0dHJ5IHtcbiBcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpO1xuIFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0aWYgKHR5cGVvZiBpdGVtLmVycm9ySGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gXHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0aXRlbS5lcnJvckhhbmRsZXIoZXJyKTtcbiBcdFx0XHRcdFx0fSBjYXRjaCAoZXJyMikge1xuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIyLFxuIFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnIyO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIGhhbmRsZSBlcnJvcnMgaW4gYWNjZXB0IGhhbmRsZXJzIGFuZCBzZWxmIGFjY2VwdGVkIG1vZHVsZSBsb2FkXG4gXHRcdGlmIChlcnJvcikge1xuIFx0XHRcdGhvdFNldFN0YXR1cyhcImZhaWxcIik7XG4gXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiBcdFx0fVxuXG4gXHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XG4gXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gXHRcdFx0cmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aG90OiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpLFxuIFx0XHRcdHBhcmVudHM6IChob3RDdXJyZW50UGFyZW50c1RlbXAgPSBob3RDdXJyZW50UGFyZW50cywgaG90Q3VycmVudFBhcmVudHMgPSBbXSwgaG90Q3VycmVudFBhcmVudHNUZW1wKSxcbiBcdFx0XHRjaGlsZHJlbjogW11cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkpO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIF9fd2VicGFja19oYXNoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18uaCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaG90Q3VycmVudEhhc2g7IH07XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gaG90Q3JlYXRlUmVxdWlyZShcIi4vc3JjL21haW4uanNcIikoX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL3NyYy9tYWluLmpzXCIpO1xuIiwiaW1wb3J0IERpcmVjdGl2ZSBmcm9tICcuL2RpcmVjdGl2ZS5qcydcclxuaW1wb3J0IHt0b0FycmF5LCByZXBsYWNlLCBnZXRBdHRyLCBnZXRCaW5kQXR0cn0gZnJvbSAnLi91dGlscy5qcydcclxuaW1wb3J0IHtkZWZpbmVSZWFjdGl2ZX0gZnJvbSAnLi9vYnNlcnZlci5qcydcclxuXHJcbi8vIOaMh+S7pOaPj+i/sOespuWuueWZqFxyXG5jb25zdCBkZXMgPSBbXVxyXG4vLyDnlKjmnaXliKTmlq3lvZPliY3mmK/lkKblnKjop6PmnpDmjIfku6RcclxubGV0IHBlbmRpbmcgPSBmYWxzZVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGUodm0sIGVsKSB7XHJcbiAgICAvLyDlpoLmnpzlvZPliY3oioLngrnkuI3mmK92LWZvcuaMh+S7pCDliJnnu6fnu63op6PmnpDlrZDoioLngrlcclxuICAgIGlmICghY29tcGlsZU5vZGUoZWwsIHZtKSkge1xyXG4gICAgICAgIGlmIChlbC5oYXNDaGlsZE5vZGVzKCkpIHtcclxuICAgICAgICAgICAgY29tcGlsZU5vZGVMaXN0KGVsLmNoaWxkTm9kZXMsIHZtKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g5b2T5YmN5Zyo6Kej5p6Q5oyH5LukIOWmguaenOacieaWsOeahOaMh+S7pCDliJnliqDliLBkZXPmlbDnu4TlkI7pnaIg5pWw57uE5Lya5oyJ6aG65bqP5omn6KGM5o+P6L+w56ymIOWMheaLrOaWsOeahOaPj+i/sOesplxyXG4gICAgLy8g5YGH5aaC5pyJNeS4quaPj+i/sOespiDlvZPliY3miafooYzliLDnrKwy5LiqIOWmguaenOacieaWsOeahCDliJlwdXNo6L+b5pWw57uEIFxyXG4gICAgaWYgKCFwZW5kaW5nKSB7XHJcbiAgICAgICAgbGV0IGRpciwgZGVzY3JpcHRvclxyXG4gICAgICAgIHBlbmRpbmcgPSB0cnVlXHJcbiAgICAgICAgc29ydERlc2NyaXB0b3JzKGRlcylcclxuICAgICAgICB3aGlsZSAoZGVzLmxlbmd0aCkgeyAgICAgICBcclxuICAgICAgICAgICAgZGVzY3JpcHRvciA9IGRlcy5zaGlmdCgpXHJcbiAgICAgICAgICAgIGRpciA9IG5ldyBEaXJlY3RpdmUoZGVzY3JpcHRvciwgZGVzY3JpcHRvci52bSkgIFxyXG4gICAgICAgICAgICBkaXIuX2JpbmQoKSAgICAgICAgICBcclxuICAgICAgICAgICAgZGVzY3JpcHRvci52bS5fZGlyZWN0aXZlcy5wdXNoKGRpcikgIFxyXG4gICAgICAgIH1cclxuICAgICAgICBwZW5kaW5nID0gZmFsc2VcclxuICAgICAgICB2bS5fY2FsbEhvb2soJ2NvbXBpbGVkJylcclxuICAgICAgICAvLyBKU+S4u+e6v+eoi+aJp+ihjOWujOWGjei/m+ihjOW6n+W8g+aMh+S7pOWbnuaUtlxyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0ZWFyZG93bih2bSlcclxuICAgICAgICAgICAgdm0uX2NhbGxIb29rKCdkZXN0cm95ZWQnKVxyXG4gICAgICAgIH0sIDApXHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbXBpbGVOb2RlKG5vZGUsIHZtKSB7XHJcbiAgICBjb25zdCB0eXBlID0gbm9kZS5ub2RlVHlwZVxyXG4gICAgaWYgKHR5cGUgPT0gMSkge1xyXG4gICAgICAgIHJldHVybiBjb21waWxlRWxlbWVudChub2RlLCB2bSlcclxuICAgIH0gZWxzZSBpZiAodHlwZSA9PSAzKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbXBpbGVUZXh0Tm9kZShub2RlLCB2bSlcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGNvbXBpbGVOb2RlTGlzdChub2Rlcywgdm0pIHtcclxuICAgIG5vZGVzLmZvckVhY2gobm9kZSA9PiB7XHJcbiAgICAgICAgaWYgKCFjb21waWxlTm9kZShub2RlLCB2bSkpIHsgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAobm9kZS5oYXNDaGlsZE5vZGVzKCkpIHsgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY29tcGlsZU5vZGVMaXN0KG5vZGUuY2hpbGROb2Rlcywgdm0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59XHJcblxyXG5jb25zdCBvblJlID0gL14odi1vbjp8QCkvXHJcbmNvbnN0IGRpckF0dHJSRSA9IC9edi0oW146XSspKD86JHw6KC4qKSQpL1xyXG5jb25zdCBiaW5kUmUgPSAvXih2LWJpbmQ6fDopL1xyXG5jb25zdCB0YWdSRSA9IC9cXHtcXHtcXHsoKD86LnxcXG4pKz8pXFx9XFx9XFx9fFxce1xceygoPzoufFxcbikrPylcXH1cXH0vZ1xyXG5jb25zdCBjb21tb25UYWdSRSA9IC9eKGRpdnxwfHNwYW58aW1nfGF8YnxpfGJyfHVsfG9sfGxpfGgxfGgyfGgzfGg0fGg1fGg2fGNvZGV8cHJlfHRhYmxlfHRofHRkfHRyfGZvcm18bGFiZWx8aW5wdXR8c2VsZWN0fG9wdGlvbnxuYXZ8YXJ0aWNsZXxzZWN0aW9ufGhlYWRlcnxmb290ZXJ8YnV0dG9ufHRleHRhcmVhKSQvaVxyXG5jb25zdCByZXNlcnZlZFRhZ1JFID0gL14oc2xvdHxwYXJ0aWFsfGNvbXBvbmVudCkkL2lcclxuXHJcbmZ1bmN0aW9uIGNvbXBpbGVFbGVtZW50KG5vZGUsIHZtKSB7ICAgXHJcbiAgICBjb25zdCBkaXJlY3RpdmVzID0gdm0uJG9wdGlvbnMuZGlyZWN0aXZlc1xyXG4gICAgY29uc3QgdGFnID0gbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgXHJcbiAgICBpZiAoIWNvbW1vblRhZ1JFLnRlc3QodGFnKSAmJiAhcmVzZXJ2ZWRUYWdSRS50ZXN0KHRhZykpIHsgICAgXHJcbiAgICAgICAgaWYgKHZtLiRvcHRpb25zLmNvbXBvbmVudHNbdGFnXSkge1xyXG4gICAgICAgICAgICBkZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICB2bSxcclxuICAgICAgICAgICAgICAgIGVsOiBub2RlLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogJ2NvbXBvbmVudCcsXHJcbiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiB0YWcsXHJcbiAgICAgICAgICAgICAgICBkZWY6IGRpcmVjdGl2ZXMuY29tcG9uZW50LFxyXG4gICAgICAgICAgICAgICAgbW9kaWZpZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGl0ZXJhbDogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0gXHJcbiAgICB9IGVsc2UgaWYgKHRhZyA9PT0gJ3Nsb3QnKSB7XHJcbiAgICAgICAgZGVzLnB1c2goe1xyXG4gICAgICAgICAgICB2bSxcclxuICAgICAgICAgICAgZWw6IG5vZGUsXHJcbiAgICAgICAgICAgIGFyZzogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICBuYW1lOiAnc2xvdCcsXHJcbiAgICAgICAgICAgIGF0dHI6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgZXhwcmVzc2lvbjogJycsXHJcbiAgICAgICAgICAgIGRlZjogZGlyZWN0aXZlcy5zbG90XHJcbiAgICAgICAgfSlcclxuICAgIH0gZWxzZSBpZiAobm9kZS5oYXNBdHRyaWJ1dGVzKCkpIHsgICAgICAgXHJcbiAgICAgICAgbGV0IG1hdGNoZWRcclxuICAgICAgICBsZXQgaXNGb3IgPSBmYWxzZVxyXG4gICAgICAgIGNvbnN0IGF0dHJzID0gdG9BcnJheShub2RlLmF0dHJpYnV0ZXMpXHJcbiAgICAgICAgYXR0cnMuZm9yRWFjaCgoYXR0cikgPT4geyAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGF0dHIubmFtZS50cmltKClcclxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBhdHRyLnZhbHVlLnRyaW0oKVxyXG4gICAgICAgICAgICBpZiAob25SZS50ZXN0KG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKVxyXG4gICAgICAgICAgICAgICAgZGVzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLFxyXG4gICAgICAgICAgICAgICAgICAgIGVsOiBub2RlLFxyXG4gICAgICAgICAgICAgICAgICAgIGFyZzogbmFtZS5yZXBsYWNlKG9uUmUsICcnKSxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHI6IG5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmOiBkaXJlY3RpdmVzLm9uXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJpbmRSZS50ZXN0KG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKVxyXG4gICAgICAgICAgICAgICAgLy8g6ZKI5a+56L+H5ruk5ZmoXHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZXMgPSB2YWx1ZS5zcGxpdCgnfCcpXHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLFxyXG4gICAgICAgICAgICAgICAgICAgIGVsOiBub2RlLFxyXG4gICAgICAgICAgICAgICAgICAgIGFyZzogbmFtZS5yZXBsYWNlKGJpbmRSZSwgJycpLFxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdiaW5kJyxcclxuICAgICAgICAgICAgICAgICAgICBhdHRyOiBuYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlZjogZGlyZWN0aXZlcy5iaW5kXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBleHByZXNzaW9uID0gdmFsdWVzLnNoaWZ0KClcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWx0ZXJzID0gW11cclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXMuZm9yRWFjaCh2YWx1ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB2YWx1ZS50cmltKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0ZW1wLmV4cHJlc3Npb24gPSBleHByZXNzaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcC5maWx0ZXJzID0gZmlsdGVyc1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wLmV4cHJlc3Npb24gPSB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGRlcy5wdXNoKHRlbXApXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hlZCA9IG5hbWUubWF0Y2goZGlyQXR0clJFKSkgeyAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmIChuYW1lID09ICd2LXRleHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSlcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZXMgPSB2YWx1ZS5zcGxpdCgnfCcpXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsOiBub2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmc6IG5hbWUucmVwbGFjZShiaW5kUmUsICcnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3RleHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyOiBuYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWY6IGRpcmVjdGl2ZXMudGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IHZhbHVlcy5zaGlmdCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbHRlcnMgPSBbXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMuZm9yRWFjaCh2YWx1ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHZhbHVlLnRyaW0oKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAuZXhwcmVzc2lvbiA9IGV4cHJlc3Npb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcC5maWx0ZXJzID0gZmlsdGVyc1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAuZXhwcmVzc2lvbiA9IHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBkZXMucHVzaCh0ZW1wKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuYW1lICE9PSAndi1lbHNlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgZGVzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWw6IG5vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZzogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLnJlcGxhY2UoL152LS8sICcnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjogbmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZjogZGlyZWN0aXZlc1ttYXRjaGVkWzFdXVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgPT0gJ3YtZm9yJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzRm9yID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4gaXNGb3JcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY29tcGlsZVRleHROb2RlKG5vZGUsIHZtKSB7XHJcbiAgICBjb25zdCB0b2tlbnMgPSBwYXJzZVRleHQobm9kZS5ub2RlVmFsdWUsIHZtKVxyXG4gICAgaWYgKCF0b2tlbnMpIHtcclxuICAgICAgICByZXR1cm5cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBmcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpXHJcbiAgICBsZXQgZWxcclxuICAgIHRva2Vucy5mb3JFYWNoKHRva2VuID0+IHtcclxuICAgICAgICBlbCA9IHRva2VuLnRhZyA/IHByb2Nlc3NUZXh0VG9rZW4odG9rZW4sIHZtKSA6IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRva2VuLnZhbHVlKVxyXG4gICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQoZWwpXHJcbiAgICAgICAgaWYgKHRva2VuLnRhZykge1xyXG4gICAgICAgICAgICBkZXMucHVzaCh0b2tlbi5kZXNjcmlwdG9yKVxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICByZXBsYWNlKG5vZGUsIGZyYWcpXHJcbn1cclxuLy8g5bCG5paH5qGj6IqC54K56Kej6YeK5Li6VE9LRU5cclxuZnVuY3Rpb24gcGFyc2VUZXh0KHRleHQsIHZtKSB7XHJcbiAgICBsZXQgaW5kZXggPSAwXHJcbiAgICBsZXQgbGFzdEluZGV4ID0gMFxyXG4gICAgbGV0IG1hdGNoXHJcbiAgICBjb25zdCB0b2tlbnMgPSBbXVxyXG5cclxuICAgIHdoaWxlIChtYXRjaCA9IHRhZ1JFLmV4ZWModGV4dCkpIHtcclxuICAgICAgICBpbmRleCA9IG1hdGNoLmluZGV4XHJcblxyXG4gICAgICAgIGlmIChpbmRleCA+IGxhc3RJbmRleCkge1xyXG4gICAgICAgICAgICB0b2tlbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGV4dC5zbGljZShsYXN0SW5kZXgsIGluZGV4KSxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRva2Vucy5wdXNoKHtcclxuICAgICAgICAgICAgdmFsdWU6IG1hdGNoWzJdLFxyXG4gICAgICAgICAgICB0YWc6IHRydWVcclxuICAgICAgICB9KVxyXG4gICAgICAgIGxhc3RJbmRleCA9IGluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGxhc3RJbmRleCA8IHRleHQubGVuZ3RoKSB7XHJcbiAgICAgICAgdG9rZW5zLnB1c2goe1xyXG4gICAgICAgICAgICB2YWx1ZTogdGV4dC5zbGljZShsYXN0SW5kZXgpXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIHJldHVybiB0b2tlbnNcclxufVxyXG5cclxuZnVuY3Rpb24gcHJvY2Vzc1RleHRUb2tlbih0b2tlbiwgdm0pIHtcclxuICAgIGNvbnN0IGRpcmVjdGl2ZXMgPSB2bS4kb3B0aW9ucy5kaXJlY3RpdmVzXHJcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcgJylcclxuICAgIGlmICh0b2tlbi5kZXNjcmlwdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICAvLyDpkojlr7nov4fmu6TlmahcclxuICAgIGNvbnN0IHZhbHVlcyA9IHRva2VuLnZhbHVlLnNwbGl0KCd8JylcclxuICAgIHRva2VuLmRlc2NyaXB0b3IgPSB7XHJcbiAgICAgICAgdm0sXHJcbiAgICAgICAgZWwsXHJcbiAgICAgICAgbmFtZTogJ3RleHQnLFxyXG4gICAgICAgIGRlZjogZGlyZWN0aXZlcy50ZXh0LFxyXG4gICAgfVxyXG5cclxuICAgIGlmICh2YWx1ZXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzLnNoaWZ0KClcclxuICAgICAgICBjb25zdCBmaWx0ZXJzID0gW11cclxuICAgICAgICBcclxuICAgICAgICB2YWx1ZXMuZm9yRWFjaCh2YWx1ZSA9PiB7XHJcbiAgICAgICAgICAgIGZpbHRlcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiB2YWx1ZS50cmltKClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICB0b2tlbi5kZXNjcmlwdG9yLmV4cHJlc3Npb24gPSB2YWx1ZS50cmltKClcclxuICAgICAgICB0b2tlbi5kZXNjcmlwdG9yLmZpbHRlcnMgPSBmaWx0ZXJzXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRva2VuLmRlc2NyaXB0b3IuZXhwcmVzc2lvbiA9IHRva2VuLnZhbHVlLnRyaW0oKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBlbFxyXG59XHJcblxyXG4vLyDmlbTnkIbmjIfku6TkvJjlhYjnuqcg5LyY5YWI6auY55qE5YWI5omn6KGMIOS+i+WmgnYtZm9yXHJcbmZ1bmN0aW9uIHNvcnREZXNjcmlwdG9ycyhkZXMpIHtcclxuICAgIGRlcy5mb3JFYWNoKGQgPT4ge1xyXG4gICAgICAgIGlmICghZC5kZWYucHJpb3JpdHkpIHtcclxuICAgICAgICAgICAgZC5kZWYucHJpb3JpdHkgPSAxMDAwXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIGRlcy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGIuZGVmLnByaW9yaXR5IC0gYS5kZWYucHJpb3JpdHlcclxuICAgIH0pXHJcbn1cclxuXHJcbi8vIOWIoOmZpOW3sue7j+eUqOS4jeS4iueahOaMh+S7pCDlpoLmnpzkuI3mmK92LWlm44CBdi1mb3Ig5bm25LiU5LiN5Zyo5paH5qGj5Lit55qERE9N5YWD57Sg5Yig6Zmk5bm25ZKM55u45bqU57uR5a6a55qE5oyH5Luk44CB6KeC5a+f6ICF5Ye95pWw5Yig6ZmkXHJcbmZ1bmN0aW9uIHRlYXJkb3duKHZtKSB7XHJcbiAgICBjb25zdCBib2R5ID0gZG9jdW1lbnQuYm9keVxyXG4gICAgY29uc3QgY29udGFpbnMgPSBib2R5LmNvbnRhaW5zXHJcbiAgICBjb25zdCBkaXJzID0gdm0uX2RpcmVjdGl2ZXNcclxuICAgIGxldCBhdHRyXHJcbiAgICBjb25zdCB0ZW1wID0gW11cclxuICAgIGxldCBkaXJcclxuICAgIC8vIGRvY3VtZW50LmJvZHkuY29udGFpbnPliKTmlq1ET03mmK/lkKblnKjmlofmoaPkuK1cclxuICAgIHdoaWxlIChkaXJzLmxlbmd0aCkge1xyXG4gICAgICAgIGRpciA9IGRpcnMuc2hpZnQoKVxyXG4gICAgICAgIGF0dHIgPSBkaXIuZGVzY3JpcHRvci5hdHRyXHJcbiAgICAgICAgLy8g5aaC5p6cRE9N5LiN5Zyo5paH5qGj5LitIOW5tuS4lOaMh+S7pOS4jeaYr3YtZm9yIHYtaWbliJnliKDpmaTmjIfku6RcclxuICAgICAgICBpZiAoIWNvbnRhaW5zLmNhbGwoYm9keSwgZGlyLmVsKSAmJiBhdHRyICE9PSAndi1mb3InICYmIGF0dHIgIT09ICd2LWlmJykge1xyXG4gICAgICAgICAgICBkaXIuX3RlYXJkb3duKClcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0ZW1wLnB1c2goZGlyKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgdm0uX2RpcmVjdGl2ZXMgPSBbLi4udGVtcF1cclxuICAgIHRlbXAubGVuZ3RoID0gMFxyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGVQcm9wcyh2bSwgZWwsIHByb3BzT3B0aW9ucykge1xyXG4gICAgY29uc3QgZGlyZWN0aXZlcyA9IHZtLiRvcHRpb25zLmRpcmVjdGl2ZXNcclxuICAgIGNvbnN0IHByb3BzID0gW11cclxuICAgIGxldCBwcm9wLCB2YWx1ZSwgbmFtZVxyXG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHByb3BzT3B0aW9ucylcclxuICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgIG5hbWUgPSBwcm9wc09wdGlvbnNba2V5XVxyXG4gICAgICAgIHByb3AgPSB7XHJcbiAgICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICAgIHBhdGg6IG5hbWVcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCh2YWx1ZSA9IGdldEJpbmRBdHRyKGVsLCBuYW1lKSkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgLy8g5Yqo5oCB57uR5a6aXHJcbiAgICAgICAgICAgIHByb3AuZHluYW1pYyA9IHRydWVcclxuICAgICAgICAgICAgcHJvcC5yYXcgPSBwcm9wLnBhcmVudFBhdGggPSB2YWx1ZVxyXG4gICAgICAgIH0gZWxzZSBpZiAoKHZhbHVlID0gZ2V0QXR0cihlbCwgbmFtZSkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIOmdmeaAgee7keWumlxyXG4gICAgICAgICAgICBwcm9wLnJhdyA9IHZhbHVlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb3BzLnB1c2gocHJvcClcclxuICAgIH0pXHJcblxyXG4gICAgdm0uX3Byb3BzID0ge31cclxuICAgIHByb3BzLmZvckVhY2gocHJvcCA9PiB7XHJcbiAgICAgICAgbGV0IHtwYXRoLCByYXcsIG9wdGlvbnN9ID0gcHJvcFxyXG4gICAgICAgIHZtLl9wcm9wc1twYXRoXSA9IHByb3BcclxuICAgICAgICAvLyDliqjmgIHnu5HlrprliJnlu7rkuIDkuKrmjIfku6Qg5ZCm5YiZ55u05o6l5riy5p+TXHJcbiAgICAgICAgaWYgKHByb3AuZHluYW1pYykge1xyXG4gICAgICAgICAgICBpZiAodm0uX2NvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIGRlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICB2bSxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAncHJvcCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmOiBkaXJlY3RpdmVzLnByb3AsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcCxcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkZWZpbmVSZWFjdGl2ZSh2bSwgcHJvcC5wYXRoLCBwcm9wLnJhdylcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59IiwiLy8gZGVw5a6e5L6L55qESURcclxubGV0IHVpZCA9IDBcclxuLy8gRGVwLnRhcmdldOS4undhdGNoZXLlrp7kvotcclxuRGVwLnRhcmdldCA9IG51bGxcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERlcCgpIHtcclxuICAgIHRoaXMuaWQgPSB1aWQrK1xyXG4gICAgdGhpcy5zdWJzID0gW10gICAgXHJcbn1cclxuXHJcbkRlcC5wcm90b3R5cGUgPSB7XHJcbiAgICBkZXBlbmQoKSB7XHJcbiAgICAgICAgaWYgKERlcC50YXJnZXQpIHtcclxuICAgICAgICAgICAgRGVwLnRhcmdldC5hZGREZXAodGhpcylcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGFkZFN1YihzdWIpIHtcclxuICAgICAgICB0aGlzLnN1YnMucHVzaChzdWIpXHJcbiAgICB9LFxyXG5cclxuICAgIHJlbW92ZVN1YihzdWIpIHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuc3Vicy5pbmRleE9mKHN1YilcclxuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLnN1YnMuc3BsaWNlKGluZGV4LCAxKVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgbm90aWZ5KCkge1xyXG4gICAgICAgIHRoaXMuc3Vicy5mb3JFYWNoKHdhdGNoZXIgPT4ge1xyXG4gICAgICAgICAgICB3YXRjaGVyLnVwZGF0ZSgpXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufSIsImltcG9ydCB7ZXh0ZW5kfSBmcm9tICcuL3V0aWxzLmpzJ1xyXG5pbXBvcnQge1dhdGNoZXJ9IGZyb20gJy4vd2F0Y2hlci5qcydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERpcmVjdGl2ZShkZXNjcmlwdG9yLCB2bSkge1xyXG4gICAgdGhpcy52bSA9IHZtXHJcbiAgICB0aGlzLm5hbWUgPSBkZXNjcmlwdG9yLm5hbWVcclxuICAgIHRoaXMuZGVzY3JpcHRvciA9IGRlc2NyaXB0b3JcclxuICAgIHRoaXMuZXhwcmVzc2lvbiA9IGRlc2NyaXB0b3IuZXhwcmVzc2lvblxyXG4gICAgdGhpcy5lbCA9IGRlc2NyaXB0b3IuZWxcclxuICAgIHRoaXMuZmlsdGVycyA9IGRlc2NyaXB0b3IuZmlsdGVyc1xyXG4gICAgdGhpcy5tb2RpZmllcnMgPSBkZXNjcmlwdG9yLm1vZGlmaWVyc1xyXG4gICAgdGhpcy5saXRlcmFsID0gdGhpcy5tb2RpZmllcnMgJiYgdGhpcy5tb2RpZmllcnMubGl0ZXJhbFxyXG59XHJcblxyXG5EaXJlY3RpdmUucHJvdG90eXBlID0ge1xyXG4gICAgX2JpbmQoKSB7XHJcbiAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IHRoaXMuZGVzY3JpcHRvclxyXG4gICAgICAgIGNvbnN0IGRlZiA9IGRlc2NyaXB0b3IuZGVmXHJcbiAgICAgICAgaWYgKHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUgPSBkZWZcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBleHRlbmQodGhpcywgZGVmKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5aaC5p6c5oyH5Luk5Zue6LCD5a+56LGh5pyJYmluZOWHveaVsOWImeaJp+ihjFxyXG4gICAgICAgIGlmICh0aGlzLmJpbmQpIHtcclxuICAgICAgICAgICAgdGhpcy5iaW5kKClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmxpdGVyYWwpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUgJiYgdGhpcy51cGRhdGUoZGVzY3JpcHRvci5yYXcpXHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmV4cHJlc3Npb24pIHtcclxuICAgICAgICAgICAgY29uc3QgZGlyID0gdGhpc1xyXG4gICAgICAgICAgICBpZiAodGhpcy51cGRhdGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2xkVmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyLnVwZGF0ZSh2YWx1ZSwgb2xkVmFsKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHdhdGNoZXIgPSB0aGlzLl93YXRjaGVyID0gbmV3IFdhdGNoZXIodGhpcy52bSwgdGhpcy5leHByZXNzaW9uLCB0aGlzLl91cGRhdGUsIHtcclxuICAgICAgICAgICAgICAgIGZpbHRlcnM6IHRoaXMuZmlsdGVyc1xyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgLy8g56ys5LiA5qyh5pu05paw5riy5p+TXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnVwZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUod2F0Y2hlci52YWx1ZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgc2V0KHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fd2F0Y2hlci5zZXQodmFsdWUpXHJcbiAgICB9LFxyXG5cclxuICAgIF90ZWFyZG93bihpKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudW5iaW5kKSB7XHJcbiAgICAgICAgICAgIHRoaXMudW5iaW5kKClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl93YXRjaGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3dhdGNoZXIudGVhcmRvd24oKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy52bSA9IHRoaXMuZWwgPSB0aGlzLl93YXRjaGVyID0gbnVsbFxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHtvbiwgb2ZmLCBiaW5kLCBpc0FycmF5LCBnZXRBdHRyLCByZW1vdmUsIHJlcGxhY2UsIGluc2VydH0gZnJvbSAnLi91dGlscy5qcydcclxuaW1wb3J0IHtjb21waWxlfSBmcm9tICcuL2NvbXBpbGUuanMnXHJcbmltcG9ydCB7ZGVmaW5lUmVhY3RpdmV9IGZyb20gJy4vb2JzZXJ2ZXIuanMnXHJcbmltcG9ydCB7V2F0Y2hlcn0gZnJvbSAnLi93YXRjaGVyLmpzJ1xyXG5cclxuY29uc3QgT04gPSA3MDBcclxuY29uc3QgTU9ERUwgPSA4MDBcclxuY29uc3QgQklORCA9IDg1MFxyXG5jb25zdCBDT01QT05FTlQgPSAxNTAwXHJcbmNvbnN0IElGID0gMjEwMFxyXG5jb25zdCBGT1IgPSAyMjAwXHJcbmNvbnN0IFNMT1QgPSAyMzAwXHJcblxyXG5cclxuY29uc3QgaGFuZGxlcnMgPSB7XHJcbiAgICB0ZXh0OiB7XHJcbiAgICAgICAgYmluZCgpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXNcclxuICAgICAgICAgICAgdGhpcy5saXN0ZW5lciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5zZXQodGhpcy52YWx1ZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvbih0aGlzLmVsLCAnaW5wdXQnLCB0aGlzLmxpc3RlbmVyKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHVwZGF0ZSh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmVsLnZhbHVlID0gdmFsdWVcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB1bmJpbmQoKSB7XHJcbiAgICAgICAgICAgIG9mZih0aGlzLmVsLCAnaW5wdXQnLCB0aGlzLmxpc3RlbmVyKVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgc2VsZWN0OiB7XHJcbiAgICAgICAgYmluZCgpIHtcclxuICAgICAgICAgICAgY29uc3QgZWwgID0gdGhpcy5lbFxyXG4gICAgICAgICAgICBsZXQgbXVsdGlwbGUgPSB0aGlzLm11bHRpcGxlID0gZWwuaGFzQXR0cmlidXRlKCdtdWx0aXBsZScpXHJcblxyXG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVyID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gZ2V0VmFsdWUoZWwsIG11bHRpcGxlKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQodmFsdWUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG9uKGVsLCAnY2hhbmdlJywgdGhpcy5saXN0ZW5lcilcclxuXHJcbiAgICAgICAgICAgIC8vIOWIneWni+WMliDlr7nmr5TlgLzmnInmsqHmnInnm7jnrYkg5aaC5p6c5pyJ5bCx6YCJ5LitXHJcbiAgICAgICAgICAgIGdldFZhbHVlKGVsLCBtdWx0aXBsZSwgdHJ1ZSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB1cGRhdGUodmFsdWUpIHtcclxuICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzLmVsXHJcbiAgICAgICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMVxyXG4gICAgICAgICAgICBjb25zdCBtdWx0aSA9IHRoaXMubXVsdGlwbGUgJiYgaXNBcnJheSh2YWx1ZSlcclxuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGVsLm9wdGlvbnNcclxuICAgICAgICAgICAgbGV0IGkgPSBvcHRpb25zLmxlbmd0aFxyXG4gICAgICAgICAgICBsZXQgb3AsIHZhbFxyXG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgICAgICAgICBvcCA9IG9wdGlvbnNbaV1cclxuICAgICAgICAgICAgICAgIHZhbCA9IG9wLnZhbHVlXHJcbiAgICAgICAgICAgICAgICBvcC5zZWxlY3RlZCA9IG11bHRpPyB2YWx1ZS5pbmRleE9mKHZhbCkgPiAtMSA6IHZhbHVlID09IHZhbFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdW5iaW5kKCkge1xyXG4gICAgICAgICAgICBvZmYodGhpcy5lbCwgJ2NoYW5nZScsIHRoaXMubGlzdGVuZXIpXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICByYWRpbzoge1xyXG4gICAgICAgIGJpbmQoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzXHJcbiAgICAgICAgICAgIGNvbnN0IGVsID0gdGhpcy5lbFxyXG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnNldCh0aGlzLnZhbHVlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBvbih0aGlzLmVsLCAnY2hhbmdlJywgdGhpcy5saXN0ZW5lcilcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB1cGRhdGUodmFsdWUpIHtcclxuICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzLmVsXHJcbiAgICAgICAgICAgIGVsLmNoZWNrZWQgPSBlbC52YWx1ZSA9PSB2YWx1ZVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHVuYmluZCgpIHtcclxuICAgICAgICAgICAgb2ZmKHRoaXMuZWwsICdjaGFuZ2UnLCB0aGlzLmxpc3RlbmVyKVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgY2hlY2tib3g6IHtcclxuICAgICAgICBiaW5kKCkge1xyXG4gICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpc1xyXG4gICAgICAgICAgICBjb25zdCBlbCA9IHRoaXMuZWxcclxuXHJcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzQ2hlY2tlZCA9IGVsLmNoZWNrZWRcclxuICAgICAgICAgICAgICAgIGxldCB2YWwgPSBzZWxmLl93YXRjaGVyLmdldCgpXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNBcnJheSh2YWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gdmFsLmluZGV4T2YodGhpcy52YWx1ZSlcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNDaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXQodmFsLmNvbmNhdCh0aGlzLnZhbHVlKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0KHZhbC5zbGljZSgwLCBpbmRleCkuY29uY2F0KHZhbC5zbGljZShpbmRleCArIDEpKSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0KGlzQ2hlY2tlZClcclxuICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG9uKGVsLCAnY2hhbmdlJywgdGhpcy5saXN0ZW5lcilcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB1cGRhdGUodmFsdWUpIHtcclxuICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzLmVsXHJcbiAgICAgICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgZWwuY2hlY2tlZCA9IHZhbHVlLmluZGV4T2YoZWwudmFsdWUpID4gLTFcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVsLmNoZWNrZWQgPSAhIXZhbHVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB1bmJpbmQoKSB7XHJcbiAgICAgICAgICAgIG9mZihlbCwgJ2NoYW5nZScsIHRoaXMubGlzdGVuZXIpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyDpkojlr7nlkITnp43mjIfku6TnmoTlm57osIPlh73mlbBcclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgLy8g5paH5pys6IqC54K5IHt7dGV4dH19XHJcbiAgICB0ZXh0OiB7XHJcbiAgICAgICAgYmluZCgpIHtcclxuICAgICAgICAgICAgdGhpcy5hdHRyID0gdGhpcy5lbC5ub2RlVHlwZSA9PT0gMyA/ICdkYXRhJyA6ICd0ZXh0Q29udGVudCdcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB1cGRhdGUodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5lbFt0aGlzLmF0dHJdID0gdmFsdWVcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgLy8gQCB8IHYtb25cclxuICAgIG9uOiB7XHJcbiAgICAgICAgcHJpb3JpdHk6IE9OLFxyXG5cclxuICAgICAgICB1cGRhdGUoaGFuZGxlcikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVyKSB7XHJcbiAgICAgICAgICAgICAgICBvZmYodGhpcy5lbCwgdGhpcy5kZXNjcmlwdG9yLmFyZywgdGhpcy5oYW5kbGVyKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXJcclxuICAgICAgICAgICAgb24odGhpcy5lbCwgdGhpcy5kZXNjcmlwdG9yLmFyZywgdGhpcy5oYW5kbGVyKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHVuYmluZCgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlcikge1xyXG4gICAgICAgICAgICAgICAgb2ZmKHRoaXMuZWwsIHRoaXMuZGVzY3JpcHRvci5hcmcsIHRoaXMuaGFuZGxlcilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICAvLyA6IHwgdi1iaW5kOlxyXG4gICAgYmluZDoge1xyXG4gICAgICAgIHByaW9yaXR5OiBCSU5ELFxyXG4gICAgICAgIGJpbmQoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXR0ciA9IHRoaXMuZGVzY3JpcHRvci5hcmdcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB1cGRhdGUodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUodGhpcy5hdHRyLCB2YWx1ZSlcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgLy8gdi1tb2RlbFxyXG4gICAgbW9kZWw6IHtcclxuICAgICAgICBwcmlvcml0eTogTU9ERUwsXHJcbiAgICAgICAgYmluZCgpIHtcclxuICAgICAgICAgICAgY29uc3QgZWwgPSB0aGlzLmVsXHJcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IGVsLnRhZ05hbWVcclxuICAgICAgICAgICAgbGV0IGhhbmRsZXJcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAodGFnKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdJTlBVVCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlciA9IGhhbmRsZXJzW2VsLnR5cGVdIHx8IGhhbmRsZXJzLnRleHRcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnVEVYVEFSRUEnOlxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBoYW5kbGVycy50ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1NFTEVDVCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlciA9IGhhbmRsZXJzLnNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBoYW5kbGVyLmJpbmQuY2FsbCh0aGlzKVxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSA9IGhhbmRsZXIudXBkYXRlXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8vIHYtaHRtbFxyXG4gICAgaHRtbDoge1xyXG4gICAgICAgIHVwZGF0ZSh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmVsLmlubmVySFRNTCA9IHZhbHVlXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8vIHYtc2hvd1xyXG4gICAgc2hvdzoge1xyXG4gICAgICAgIHVwZGF0ZSh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmVsLnN0eWxlLmRpc3BsYXkgPSAhIXZhbHVlPyAnJyA6ICdub25lJ1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICAvLyB2LWlmXHJcbiAgICAvLyDlsIZpZuWSjGVsc2XnmoRET03pg73muLLmn5Plrozmr5XnhLblkI7np7vpmaQg5L2G55So5byV55So5L+d5a2Y6LW35p2lIOWcqOWOn+S9jee9ruaUvuS4gOS4quaWh+acrOiKgueCueWNoOS9jSDmoLnmja7lgLx0cnVlIG9yIGZhbHNlIOadpeWwhuWvueW6lOeahOiKgueCuea3u+WKoOWIsOWNoOS9jeiKgueCueeahOWJjemdolxyXG4gICAgLy8g5aaC5p6c5YC85Y+Y5pu0IOWImeWwhuiKgueCueWIoOmZpOeUqOaWsOeahOabv+aNoiBcclxuICAgIGlmOiB7XHJcbiAgICAgICAgcHJpb3JpdHk6IElGLFxyXG4gICAgICAgIGJpbmQoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsID0gdGhpcy5lbFxyXG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gZWwubmV4dEVsZW1lbnRTaWJsaW5nXHJcbiAgICAgICAgICAgIGlmIChuZXh0ICYmIGdldEF0dHIobmV4dCwgJ3YtZWxzZScpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZW1vdmUobmV4dClcclxuICAgICAgICAgICAgICAgIHRoaXMuZWxzZUVsID0gbmV4dFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIOWNoOS9jeiKgueCuVxyXG4gICAgICAgICAgICB0aGlzLmFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKVxyXG4gICAgICAgICAgICByZXBsYWNlKGVsLCB0aGlzLmFuY2hvcilcclxuICAgICAgICAgICAgdGhpcy5pc0ZpcnN0ID0gdHJ1ZVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHVwZGF0ZSh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNsb25lRWxzZUVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKHRoaXMuY2xvbmVFbHNlRWwpXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzRmlyc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb25lRWwgPSB0aGlzLmVsLmNsb25lTm9kZSh0cnVlKVxyXG4gICAgICAgICAgICAgICAgICAgIGluc2VydCh0aGlzLmNsb25lRWwsIHRoaXMuYW5jaG9yKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRmlyc3QgPSBmYWxzZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9uZUVsID0gdGhpcy5lbC5jbG9uZU5vZGUodHJ1ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0KHRoaXMuY2xvbmVFbCwgdGhpcy5hbmNob3IpXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgMClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2xvbmVFbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZSh0aGlzLmNsb25lRWwpXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzRmlyc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb25lRWxzZUVsID0gdGhpcy5lbHNlRWwuY2xvbmVOb2RlKHRydWUpXHJcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0KHRoaXMuY2xvbmVFbHNlRWwsIHRoaXMuYW5jaG9yKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRmlyc3QgPSBmYWxzZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9uZUVsc2VFbCA9IHRoaXMuZWxzZUVsLmNsb25lTm9kZSh0cnVlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQodGhpcy5jbG9uZUVsc2VFbCwgdGhpcy5hbmNob3IpXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgMClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICAvLyB2LWZvclxyXG4gICAgLy8g5bCGdi1mb3LoioLngrnlhYvpmoYg5YaN5qC55o2u5YC855qE6ZW/5bqm5YWL6ZqG6L+b5Y675YaNY29tcGlsZea4suafkyDlpoLmnpzlgLzlj5jmm7Qg5YiZ5bCG5LmL5YmN55qE6IqC54K55YWo6YOo5Yig6ZmkIOmHjeaWsOa4suafk1xyXG4gICAgZm9yOiB7XHJcbiAgICAgICAgcHJpb3JpdHk6IEZPUixcclxuICAgICAgICBiaW5kKCkge1xyXG4gICAgICAgICAgICBjb25zdCByZTEgPSAvKC4qKSAoPzppbnxvZikgKC4qKS9cclxuICAgICAgICAgICAgY29uc3QgcmUyID0gL1xcKCguKiksKC4qKVxcKS9cclxuICAgICAgICAgICAgbGV0IG1hdGNoID0gdGhpcy5leHByZXNzaW9uLm1hdGNoKHJlMSlcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChtYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoMSA9IG1hdGNoWzFdLm1hdGNoKC9cXCgoLiopLCguKilcXCkvKVxyXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWVLZXkgPSBtYXRjaDFbMV0udHJpbSgpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleEtleSA9IG1hdGNoMVsyXS50cmltKClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZUtleSA9IG1hdGNoWzFdLnRyaW0oKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZUtleSA9IG1hdGNoWzFdLnRyaW0oKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLmV4cHJlc3Npb24gPSBtYXRjaFsyXS50cmltKClcclxuICAgICAgICAgICAgdGhpcy5hbmNob3IgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJylcclxuICAgICAgICAgICAgdGhpcy5mcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpXHJcbiAgICAgICAgICAgIHJlcGxhY2UodGhpcy5lbCwgdGhpcy5hbmNob3IpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdXBkYXRlKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlbikge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMubGVuLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmUodGhpcy5hbmNob3IucHJldmlvdXNFbGVtZW50U2libGluZylcclxuICAgICAgICAgICAgICAgIH0gICAgICAgICAgICBcclxuICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgbGV0IGNsb25lTm9kZVxyXG4gICAgICAgICAgICBsZXQgcmUxXHJcbiAgICAgICAgICAgIGxldCByZTIgXHJcbiAgICAgICAgICAgIGxldCBodG1sXHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgJHt0aGlzLmV4cHJlc3Npb2595b+F6aG75Li65a+56LGh5oiW5pWw57uEYClcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmxlbiA9IDBcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sZW4rK1xyXG4gICAgICAgICAgICAgICAgY2xvbmVOb2RlID0gdGhpcy5lbC5jbG9uZU5vZGUodHJ1ZSlcclxuICAgICAgICAgICAgICAgIGh0bWwgPSBjbG9uZU5vZGUuaW5uZXJIVE1MXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy52YWx1ZUtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlMSA9IG5ldyBSZWdFeHAoYHt7XFxcXHMqJHt0aGlzLnZhbHVlS2V5fVxcXFxzKn19YCwgJ2cnKVxyXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UocmUxLCB2YWx1ZVtrZXldKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5kZXhLZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZTIgPSBuZXcgUmVnRXhwKGB7e1xcXFxzKiR7dGhpcy5pbmRleEtleX1cXFxccyp9fWAsICdnJylcclxuICAgICAgICAgICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKHJlMiwga2V5KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNsb25lTm9kZS5pbm5lckhUTUwgPSBodG1sIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5mcmFnLmFwcGVuZENoaWxkKGNsb25lTm9kZSlcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbXBpbGUodGhpcy52bSwgdGhpcy5mcmFnKVxyXG4gICAgICAgICAgICBpbnNlcnQodGhpcy5mcmFnLCB0aGlzLmFuY2hvcilcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgY29tcG9uZW50OiB7XHJcbiAgICAgICAgcHJpb3JpdHk6IENPTVBPTkVOVCxcclxuXHJcbiAgICAgICAgYmluZCgpIHtcclxuICAgICAgICAgICAgdGhpcy5hbmNob3IgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJylcclxuICAgICAgICAgICAgcmVwbGFjZSh0aGlzLmVsLCB0aGlzLmFuY2hvcilcclxuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSB0aGlzLmJ1aWxkKClcclxuICAgICAgICAgICAgaW5zZXJ0KGNoaWxkLiRlbCwgdGhpcy5hbmNob3IpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgYnVpbGQoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuQ29tcG9uZW50ID0gdGhpcy52bS4kb3B0aW9ucy5jb21wb25lbnRzW3RoaXMuZXhwcmVzc2lvbl1cclxuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMuZXhwcmVzc2lvbixcclxuICAgICAgICAgICAgICAgIGVsOiB0aGlzLmVsLmNsb25lTm9kZSh0cnVlKSxcclxuICAgICAgICAgICAgICAgIC8vIOe7hOS7tuagh+ivhlxyXG4gICAgICAgICAgICAgICAgX2FzQ29tcG9uZW50OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgLy8g54i257qn5LiK5LiL5paH5a+56LGhXHJcbiAgICAgICAgICAgICAgICBfY29udGV4dDogdGhpcy52bSxcclxuICAgICAgICAgICAgICAgIHBhcmVudDogdGhpcy52bSxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IHRoaXMuQ29tcG9uZW50KG9wdGlvbnMpXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBwcm9wOiB7XHJcbiAgICAgICAgYmluZCgpIHtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSB0aGlzLnZtXHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGNoaWxkLl9jb250ZXh0XHJcbiAgICAgICAgICAgIGNvbnN0IHByb3AgPSB0aGlzLmRlc2NyaXB0b3IucHJvcFxyXG4gICAgICAgICAgICBjb25zdCBjaGlsZEtleSA9IHByb3AucGF0aFxyXG4gICAgICAgICAgICBjb25zdCBwYXJlbnRLZXkgPSBwcm9wLnBhcmVudFBhdGhcclxuICAgICAgICAgICAgY29uc3QgcGFyZW50V2F0Y2hlciA9IHRoaXMucGFyZW50V2F0Y2hlciA9IG5ldyBXYXRjaGVyKHBhcmVudCwgcGFyZW50S2V5LCBmdW5jdGlvbih2YWwpIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkW3Byb3AucGF0aF0gPSB2YWxcclxuICAgICAgICAgICAgfSwge3N5bmM6IHRydWV9KVxyXG4gICAgICAgICAgICBkZWZpbmVSZWFjdGl2ZShjaGlsZCwgcHJvcC5wYXRoLCBwYXJlbnRXYXRjaGVyLnZhbHVlKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHVuYmluZCgpIHtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHNsb3Q6IHtcclxuICAgICAgICBwcmlvcml0eTogU0xPVCxcclxuXHJcbiAgICAgICAgYmluZCgpIHtcclxuICAgICAgICAgICAgbGV0IG5hbWUgPSBnZXRBdHRyKHRoaXMuZWwsICduYW1lJykgXHJcbiAgICAgICAgICAgIGlmIChuYW1lID09IG51bGwpIHsgXHJcbiAgICAgICAgICAgICAgICBuYW1lID0gJ2RlZmF1bHQnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgY29udGVudCA9IHRoaXMudm0uX3Nsb3RDb250ZW50cyAmJiB0aGlzLnZtLl9zbG90Q29udGVudHNbbmFtZV1cclxuICAgICAgICAgICAgcmVwbGFjZSh0aGlzLmVsLCBjb250ZW50KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLy8g6I635Y+Wc2VsZWN0ZWTpgInkuK3nmoTlgLxcclxuZnVuY3Rpb24gZ2V0VmFsdWUoZWwsIG11bHRpLCBpbml0KSB7XHJcbiAgICBjb25zdCByZXMgPSBtdWx0aT8gW10gOiBudWxsXHJcbiAgICBsZXQgb3AsIHNlbGVjdGVkXHJcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGVsLm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgb3AgPSBlbC5vcHRpb25zW2ldXHJcbiAgICAgICAgc2VsZWN0ZWQgPSBpbml0PyBvcC5oYXNBdHRyaWJ1dGUoJ3NlbGVjdGVkJykgOiBvcC5zZWxlY3RlZFxyXG4gICAgICAgIGlmIChzZWxlY3RlZCkge1xyXG4gICAgICAgICAgICBpZiAobXVsdGkpIHtcclxuICAgICAgICAgICAgICAgIHJlcy5wdXNoKG9wLnZhbHVlKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wLnZhbHVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzXHJcbn0iLCJpbXBvcnQgb2JzZXJ2ZSBmcm9tICcuL29ic2VydmVyLmpzJ1xyXG5pbXBvcnQge1dhdGNoZXIsIG5leHRUaWNrfSBmcm9tICcuL3dhdGNoZXIuanMnXHJcbmltcG9ydCB7dG9BcnJheSwgaXNBcnJheSwgYWRkQ2xhc3MsIGV4dGVuZCwgaGFzT3duLCByZXBsYWNlLCBxdWVyeSwgYmluZCwgZmlyc3RXb3JkdG9VcHBlciwgdG9VcHBlciwgdHJpbU5vZGUsIGlzVHJpbW1hYmxlLCBkZWVwQ29weX0gZnJvbSAnLi91dGlscy5qcydcclxuaW1wb3J0IHtjb21waWxlLCBjb21waWxlUHJvcHN9IGZyb20gJy4vY29tcGlsZS5qcydcclxuaW1wb3J0IGRpcmVjdGl2ZXMgZnJvbSAnLi9kaXJlY3RpdmVzLmpzJ1xyXG5pbXBvcnQgRGVwIGZyb20gJy4vZGVwLmpzJ1xyXG5cclxuLy8gTWluaVZ1ZeaehOmAoOWHveaVsCDlj4LmlbDmmK/kuIDkuKrlr7nosaFcclxuZnVuY3Rpb24gTWluaVZ1ZShvcHRpb25zKSB7XHJcbiAgICB0aGlzLl9pbml0KG9wdGlvbnMpXHJcbn1cclxuXHJcbk1pbmlWdWUub3B0aW9ucyA9IHtcclxuICAgIGRpcmVjdGl2ZXMsXHJcbiAgICBjb21wb25lbnRzOiB7fSxcclxuICAgIGZpbHRlcnM6IHt9LFxyXG59XHJcblxyXG4vLyDlhajlsYDmlrnms5VcclxuXHJcbi8vIOa3t+WFpeWvueixoVxyXG5NaW5pVnVlLm1peGluID0gZnVuY3Rpb24obWl4aW4pIHtcclxuICAgIHRoaXMub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyh0aGlzLm9wdGlvbnMsIG1peGluKVxyXG59XHJcblxyXG4vLyDms6jlhozlhajlsYDmjIfku6RcclxuTWluaVZ1ZS5kaXJlY3RpdmUgPSBmdW5jdGlvbihkaXJOYW1lLCBvcHRpb25zKSB7XHJcbiAgICB0aGlzLm9wdGlvbnMuZGlyZWN0aXZlc1tkaXJOYW1lXSA9IG9wdGlvbnNcclxufVxyXG5cclxuLy8g5L2/55So5o+S5Lu2XHJcbk1pbmlWdWUudXNlID0gZnVuY3Rpb24gKHBsdWdpbikge1xyXG4gICAgaWYgKHBsdWdpbi5pbnN0YWxsZWQpIHtcclxuICAgICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIGNvbnN0IGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSlcclxuICAgIGFyZ3MudW5zaGlmdCh0aGlzKVxyXG5cclxuICAgIGlmICh0eXBlb2YgcGx1Z2luLmluc3RhbGwgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICBwbHVnaW4uaW5zdGFsbC5hcHBseShwbHVnaW4sIGFyZ3MpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKVxyXG4gICAgfVxyXG4gICAgcGx1Z2luLmluc3RhbGxlZCA9IHRydWVcclxuICAgIHJldHVybiB0aGlzXHJcbn1cclxuXHJcbk1pbmlWdWUuY2lkID0gMFxyXG4vLyDnlJ/miJDlrZDnu4Tku7bmnoTpgKDlh73mlbBcclxuTWluaVZ1ZS5leHRlbmQgPSBmdW5jdGlvbihleHRlbmRPcHRpb25zKSB7XHJcbiAgICBleHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucyB8fCB7fVxyXG4gICAgY29uc3QgU3VwZXIgPSB0aGlzXHJcbiAgICBsZXQgaXNGaXJzdEV4dGVuZCA9IFN1cGVyLmNpZCA9PT0gMFxyXG4gICAgaWYgKGlzRmlyc3RFeHRlbmQgJiYgZXh0ZW5kT3B0aW9ucy5fQ3Rvcikge1xyXG4gICAgICAgIHJldHVybiBleHRlbmRPcHRpb25zLl9DdG9yXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbmFtZSA9IGV4dGVuZE9wdGlvbnMubmFtZSB8fCBTdXBlci5vcHRpb25zLm5hbWVcclxuICAgIGNvbnN0IFN1YiA9IG5ldyBGdW5jdGlvbigncmV0dXJuIGZ1bmN0aW9uICcgKyBjbGFzc2lmeShuYW1lKSArICcgKG9wdGlvbnMpIHsgdGhpcy5faW5pdChvcHRpb25zKSB9JykoKVxyXG4gICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKVxyXG4gICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YlxyXG4gICAgU3ViLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoU3VwZXIub3B0aW9ucywgZXh0ZW5kT3B0aW9ucylcclxuICAgIFN1Ylsnc3VwZXInXSA9IFN1cGVyXHJcbiAgICBTdWIuZXh0ZW5kID0gU3VwZXIuZXh0ZW5kXHJcbiAgICBTdWIuY29tcG9uZW50ID0gU3VwZXIuY29tcG9uZW50XHJcblxyXG4gICAgaWYgKG5hbWUpIHtcclxuICAgICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzRmlyc3RFeHRlbmQpIHtcclxuICAgICAgICBleHRlbmRPcHRpb25zLl9DdG9yID0gU3ViXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFN1YlxyXG59XHJcblxyXG4vLyDlhajlsYAg55Sf5oiQ57uE5Lu2XHJcbk1pbmlWdWUuY29tcG9uZW50ID0gZnVuY3Rpb24oaWQsIGRlZmluaXRpb24sIGlzUHJpdmF0ZSkge1xyXG4gICAgaWYgKCFkZWZpbml0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1snY29tcG9uZW50cyddW2lkXVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoIWRlZmluaXRpb24ubmFtZSkge1xyXG4gICAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBpZFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGVmaW5pdGlvbiA9IE1pbmlWdWUuZXh0ZW5kKGRlZmluaXRpb24pXHJcblxyXG4gICAgICAgIGlmICghaXNQcml2YXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9uc1snY29tcG9uZW50cyddW2lkXSA9IGRlZmluaXRpb25cclxuICAgICAgICB9XHJcbiAgXHJcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25cclxuICAgIH1cclxufVxyXG5cclxuLy8g5rOo5YaM6L+H5ruk5ZmoXHJcbk1pbmlWdWUuZmlsdGVyID0gZnVuY3Rpb24oaWQsIGZuKSB7XHJcbiAgICB0aGlzLm9wdGlvbnMuZmlsdGVyc1tpZF0gPSBmblxyXG59XHJcblxyXG4vLyDljp/lnovmlrnms5VcclxuTWluaVZ1ZS5wcm90b3R5cGUgPSB7XHJcbiAgICBjb25zdHJ1Y3RvcjogTWluaVZ1ZSxcclxuXHJcbiAgICAvLyDliJ3lp4vljJbmlbDmja7lkozmlrnms5VcclxuICAgIF9pbml0KG9wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLiRlbCA9IG51bGxcclxuICAgICAgICB0aGlzLiRwYXJlbnQgPSBvcHRpb25zLnBhcmVudFxyXG4gICAgICAgIC8vIE1pbmlWdWXlrp7kvotcclxuICAgICAgICB0aGlzLl9pc01pbmlWdWUgPSB0cnVlXHJcbiAgICAgICAgLy8g5qC557uE5Lu2XHJcbiAgICAgICAgdGhpcy4kcm9vdCA9IHRoaXMuJHBhcmVudD8gdGhpcy4kcGFyZW50LiRyb290IDogdGhpc1xyXG4gICAgICAgIC8vIOWtmOaUvuWtkOe7hOS7tlxyXG4gICAgICAgIHRoaXMuJGNoaWxkcmVuID0gW11cclxuXHJcbiAgICAgICAgLy8g5a2Y5pS+6KeC5a+f6ICF5a6e5L6LXHJcbiAgICAgICAgdGhpcy5fd2F0Y2hlcnMgPSBbXVxyXG5cclxuICAgICAgICAvLyDlrZjmlL7kuovku7ZcclxuICAgICAgICB0aGlzLl9ldmVudHMgPSB7fVxyXG5cclxuICAgICAgICAvLyDlrZjmlL7mjIfku6RcclxuICAgICAgICB0aGlzLl9kaXJlY3RpdmVzID0gW11cclxuXHJcbiAgICAgICAgLy8g54i257qn5LiK5LiL5paH5a+56LGhXHJcbiAgICAgICAgdGhpcy5fY29udGV4dCA9IG9wdGlvbnMuX2NvbnRleHQgfHwgdGhpcy4kcGFyZW50XHJcblxyXG4gICAgICAgIGlmICh0aGlzLiRwYXJlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy4kcGFyZW50LiRjaGlsZHJlbi5wdXNoKHRoaXMpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOWQiOW5tuWPguaVsFxyXG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLiRvcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMuY29uc3RydWN0b3Iub3B0aW9ucywgb3B0aW9ucywgdGhpcylcclxuICAgICAgICB0aGlzLl9jYWxsSG9vaygnaW5pdCcpXHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5faW5pdE1peGlucygpXHJcbiAgICAgICAgdGhpcy5faW5pdENvbXBvbmVudHMoKSAgICBcclxuICAgICAgICB0aGlzLl9pbml0UHJvcHMoKSAgICAgIFxyXG4gICAgICAgIHRoaXMuX2luaXRNZXRob2RzKCkgICAgIFxyXG4gICAgICAgIHRoaXMuX2luaXREYXRhKCkgICAgICBcclxuICAgICAgICB0aGlzLl9pbml0V2F0Y2goKVxyXG4gICAgICAgIHRoaXMuX2luaXRDb21wdXRlZCgpXHJcbiAgICAgICAgdGhpcy5faW5pdEV2ZW50cygpXHJcblxyXG4gICAgICAgIHRoaXMuX2NhbGxIb29rKCdjcmVhdGVkJylcclxuICAgICAgICB0aGlzLl9jb21waWxlKClcclxuICAgIH0sXHJcbiAgICAvLyDlsYDpg6htaXhpblxyXG4gICAgX2luaXRNaXhpbnMoKSB7XHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLiRvcHRpb25zXHJcbiAgICAgICAgaWYgKG9wdGlvbnMubWl4aW4pIHtcclxuICAgICAgICAgICAgdGhpcy4kb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhvcHRpb25zLCBvcHRpb25zLm1peGluKSAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICAvLyDlsYDpg6hjb21wb25ldFxyXG4gICAgX2luaXRDb21wb25lbnRzKCkge1xyXG4gICAgICAgIGNvbnN0IGNvbXBvbmVudHMgPSB0aGlzLiRvcHRpb25zLmNvbXBvbmVudHNcclxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoY29tcG9uZW50cylcclxuICAgICAgICBrZXlzLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICAgICAgY29tcG9uZW50c1trZXldID0gTWluaVZ1ZS5jb21wb25lbnQoa2V5LCBjb21wb25lbnRzW2tleV0sIHRydWUpXHJcbiAgICAgICAgfSlcclxuICAgIH0sXHJcblxyXG4gICAgX2luaXRQcm9wcygpIHtcclxuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy4kb3B0aW9uc1xyXG4gICAgICAgIGxldCBlbCA9IG9wdGlvbnMuZWxcclxuICAgICAgICBjb25zdCBwcm9wcyA9IG9wdGlvbnMucHJvcHNcclxuICAgICAgICBlbCA9IG9wdGlvbnMuZWwgPSBxdWVyeShlbClcclxuXHJcbiAgICAgICAgaWYgKHByb3BzICYmIGVsLm5vZGVUeXBlID09IDEpIHtcclxuICAgICAgICAgICAgY29tcGlsZVByb3BzKHRoaXMsIGVsLCBwcm9wcylcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIF9pbml0TWV0aG9kcygpIHtcclxuICAgICAgICBjb25zdCBtZXRob2RzID0gdGhpcy4kb3B0aW9ucy5tZXRob2RzPyB0aGlzLiRvcHRpb25zLm1ldGhvZHMgOiB7fVxyXG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhtZXRob2RzKVxyXG4gICAgICAgIC8vIOWwhm1ldGhvZHPkuIrnmoTmlrnms5XotYvlgLzliLB2beWunuS+i+S4ilxyXG4gICAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgICAvLyDlsIbmlrnms5V0aGlz5oyH5ZCR57uR5a6a5Yiwdm3kuIpcclxuICAgICAgICAgICAgdGhpc1trZXldID0gYmluZChtZXRob2RzW2tleV0sIHRoaXMpXHJcbiAgICAgICAgfSlcclxuICAgIH0sXHJcblxyXG4gICAgX2luaXREYXRhKCkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBkYXRhID0gdGhpcy4kb3B0aW9ucy5kYXRhXHJcbiAgICAgICAgZGF0YSA9IHRoaXMuX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJz8gZGF0YSgpIDogZGF0YSB8fCB7fVxyXG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKVxyXG4gICBcclxuICAgICAgICAvLyDlr7nmr4/kuIDkuKprZXnlrp7njrDku6PnkIYg5Y2z5Y+v6YCa6L+Hdm0ubXNn5p2l6K6/6Zeudm0uX2RhdGEubXNnXHJcbiAgICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Byb3h5KHRoaXMsICdfZGF0YScsIGtleSlcclxuICAgICAgICB9KVxyXG4gICAgICAgIC8vIOebkeWQrOaVsOaNrlxyXG4gICAgICAgIG9ic2VydmUodGhpcy5fZGF0YSlcclxuICAgIH0sXHJcblxyXG4gICAgX2luaXRXYXRjaCgpIHtcclxuICAgICAgICBpZiAodGhpcy4kb3B0aW9ucy53YXRjaCkge1xyXG4gICAgICAgICAgICBjb25zdCB3YXRjaCA9IHRoaXMuJG9wdGlvbnMud2F0Y2hcclxuICAgICAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHdhdGNoKVxyXG4gICAgICAgICAgICBrZXlzLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJHdhdGNoKGtleSwgd2F0Y2hba2V5XSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIF9pbml0Q29tcHV0ZWQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuJG9wdGlvbnMuY29tcHV0ZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgY29tcHV0ZWQgPSB0aGlzLiRvcHRpb25zLmNvbXB1dGVkXHJcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhjb21wdXRlZClcclxuICAgICAgICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiBtYWtlQ29tcHV0ZWRHZXR0ZXIoY29tcHV0ZWRba2V5XSwgdGhpcyksXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0OiBub29wXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgX2luaXRFdmVudHMoKSB7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuJG9wdGlvbnNcclxuICAgICAgICAvLyDlpoLmnpzmmK/kuIDkuKrlrZDnu4Tku7Yg5YiZ5qOA5p+l57uE5Lu25LiK5piv5ZCm57uR5a6a5LqG5LqL5Lu2XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuX2FzQ29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIHJlZ2lzdGVyQ29tcG9uZW50RXZlbnRzKHRoaXMsIG9wdGlvbnMuZWwpXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBfcHJveHkodGFyZ2V0LCBzb3VyY2VLZXksIGtleSkge1xyXG4gICAgICAgIGNvbnN0IHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDlrp7pmYXkuIror7vlj5blkozov5Tlm57nmoTmmK92bS5fZGF0YeS4iueahOaVsOaNrlxyXG4gICAgICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBmdW5jdGlvbiBwcm94eUdldHRlciAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzW3NvdXJjZUtleV1ba2V5XVxyXG4gICAgICAgIH1cclxuICAgICAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gZnVuY3Rpb24gcHJveHlTZXR0ZXIgKHZhbCkge1xyXG4gICAgICAgICAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbFxyXG4gICAgICAgIH1cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbilcclxuICAgIH0sXHJcblxyXG4gICAgLy8g5b2T5Li65a+56LGh5re75Yqg5bGe5oCn5oiW5L+u5pS55pWw57uE55qE5YC85pe25Y+v55So6L+Z5Liq5pa55rOVIOiDveWunuaXtuabtOaWsFxyXG4gICAgJHNldChvYmosIGtleSwgdmFsKSB7XHJcbiAgICAgICAgdGhpc1tvYmpdW2tleV0gPSB2YWxcclxuICAgICAgICB2bVtvYmpdLl9fb2JfXy5kZXAubm90aWZ5KClcclxuICAgIH0sXHJcbiAgICAvLyDlvZPkuLrlr7nosaHliKDpmaTlsZ7mgKfmiJbliKDpmaTmlbDnu4TnmoTlgLzml7blj6/nlKjov5nkuKrmlrnms5Ug6IO95a6e5pe25pu05pawXHJcbiAgICAkZGVsZXRlKG9iaiwga2V5KSB7XHJcbiAgICAgICAgaWYgKGlzQXJyYXkodGhpc1tvYmpdKSkge1xyXG4gICAgICAgICAgICB0aGlzW29ial0uc3BsaWNlKGtleSwgMSlcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpc1tvYmpdW2tleV1cclxuICAgICAgICAgICAgdm1bb2JqXS5fX29iX18uZGVwLm5vdGlmeSgpXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAkd2F0Y2goZXhwT3JGbiwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcclxuICAgICAgICBuZXcgV2F0Y2hlcih0aGlzLCBleHBPckZuLCBjYWxsYmFjaywgb3B0aW9ucylcclxuICAgIH0sXHJcblxyXG4gICAgJG9uKGV2ZW50LCBmbikge1xyXG4gICAgICAgICh0aGlzLl9ldmVudHNbZXZlbnRdIHx8ICh0aGlzLl9ldmVudHNbZXZlbnRdID0gW10pKS5wdXNoKGZuKVxyXG4gICAgfSxcclxuXHJcbiAgICAkb2ZmKGV2ZW50LCBmbikge1xyXG4gICAgICAgIGNvbnN0IGNicyA9IHRoaXMuX2V2ZW50c1tldmVudF1cclxuICAgICAgICBpZiAoIWZuKSB7XHJcbiAgICAgICAgICAgIGNicy5sZW5ndGggPSAwXHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgbCA9IGNicy5sZW5ndGhcclxuICAgICAgICB3aGlsZSAobC0tKSB7XHJcbiAgICAgICAgICAgIGxldCBjYiA9IGNic1tsXVxyXG4gICAgICAgICAgICBpZiAoY2IgPT09IGZuKSB7XHJcbiAgICAgICAgICAgICAgICBjYnMuc3BsaWNlKGwsIDEpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgICRlbWl0KGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgY2JzID0gdGhpcy5fZXZlbnRzW2V2ZW50XVxyXG4gICAgICAgIGNvbnN0IGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSlcclxuICAgICAgICBpZiAoIWNicykge1xyXG4gICAgICAgICAgICB0aGlzLl9ldmVudHNbZXZlbnRdID0gW11cclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgY2JzLmZvckVhY2goY2IgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2IuYXBwbHkodGhpcywgYXJncylcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjYnMuZm9yRWFjaChjYiA9PiB7XHJcbiAgICAgICAgICAgICAgICBjYi5jYWxsKHRoaXMsIGFyZ3NbMF0pXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAkb25jZShldmVudCwgZm4pIHtcclxuICAgICAgICBjb25zdCB2bSA9IHRoaXNcclxuICAgICAgICBmdW5jdGlvbiBvbigpIHtcclxuICAgICAgICAgICAgdm0uJG9mZihldmVudCwgb24pXHJcbiAgICAgICAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy4kb24oZXZlbnQsIG9uKVxyXG4gICAgfSxcclxuXHJcbiAgICAkbmV4dFRpY2s6IG5leHRUaWNrLFxyXG5cclxuICAgIC8vIOi/h+a7pOWZqFxyXG4gICAgX2FwcGx5RmlsdGVycyh2YWx1ZSwgZmlsdGVycykge1xyXG4gICAgICAgIGNvbnN0IGZpbHRlcnNPYmogPSB0aGlzLiRvcHRpb25zLmZpbHRlcnM/IHRoaXMuJG9wdGlvbnMuZmlsdGVycyA6IHt9XHJcbiAgICAgICAgbGV0IGhhbmRsZXJcclxuICAgICAgICBmaWx0ZXJzLmZvckVhY2goZmlsdGVyID0+IHtcclxuICAgICAgICAgICAgaGFuZGxlciA9IGZpbHRlcnNPYmpbZmlsdGVyLm5hbWVdXHJcbiAgICAgICAgICAgIGlmIChoYW5kbGVyKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGhhbmRsZXIuY2FsbCh0aGlzLCB2YWx1ZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcmV0dXJuIHZhbHVlXHJcbiAgICB9LCBcclxuXHJcbiAgICAvLyDnlJ/lkb3lkajmnJ/pkqnlrZDlh73mlbBcclxuICAgIF9jYWxsSG9vayhob29rKSB7XHJcbiAgICAgICAgY29uc3QgaGFuZGxlcnMgPXRoaXMuJG9wdGlvbnNbaG9va11cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVycyA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBoYW5kbGVycy5jYWxsKHRoaXMpXHJcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVycykge1xyXG4gICAgICAgICAgICBoYW5kbGVycy5mb3JFYWNoKGhhbmRsZXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyDop6PmnpBET01cclxuICAgIF9jb21waWxlKCkge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLiRvcHRpb25zXHJcbiAgICAgICAgb3B0aW9ucy5lbCA9IHRoaXMuJGVsID0gcXVlcnkob3B0aW9ucy5lbClcclxuICAgICAgICBjb25zdCB0ZW1wRWwgPSB0cmFuc2NsdWRlKHRoaXMuJGVsLCBvcHRpb25zKVxyXG4gICAgICAgIGlmICh0ZW1wRWwpIHtcclxuICAgICAgICAgICAgdGhpcy4kZWwgPSB0ZW1wRWxcclxuICAgICAgICAgICAgb3B0aW9ucy5lbC5pbm5lckhUTUwgPSAnJ1xyXG4gICAgICAgICAgICByZXBsYWNlKG9wdGlvbnMuZWwsIHRoaXMuJGVsKVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDop6PmnpBzbG90XHJcbiAgICAgICAgcmVzb2x2ZVNsb3RzKHRoaXMsIG9wdGlvbnMuX2NvbnRlbnQpXHJcbiAgICAgICAgdGhpcy5fY2FsbEhvb2soJ2JlZm9yZUNvbXBpbGUnKVxyXG4gICAgICAgIGNvbXBpbGUodGhpcywgdGhpcy4kZWwpXHJcbiAgICB9XHJcbn1cclxuXHJcbndpbmRvdy5NaW5pVnVlID0gTWluaVZ1ZVxyXG5cclxuXHJcbi8vIOepuuaTjeS9nFxyXG5mdW5jdGlvbiBub29wKCkge31cclxuXHJcbi8vIOeUn+aIkOiuoeeul+WxnuaAp2dldHRlclxyXG5mdW5jdGlvbiBtYWtlQ29tcHV0ZWRHZXR0ZXIoZ2V0dGVyLCB2bSkge1xyXG4gICAgY29uc3Qgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBnZXR0ZXIsIG51bGwsIHtcclxuICAgICAgICBsYXp5OiB0cnVlXHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyKCkge1xyXG4gICAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XHJcbiAgICAgICAgICAgIHdhdGNoZXIuZXZhbHVhdGUoKVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoRGVwLnRhcmdldCkge1xyXG4gICAgICAgICAgICB3YXRjaGVyLmRlcGVuZCgpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB3YXRjaGVyLnZhbHVlXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vLyDlkIjlubblj4LmlbBcclxuZnVuY3Rpb24gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQsIHZtKSB7XHJcbiAgICAgIFxyXG4gICAgLy8g5rex5bGC5ou36LSd5LiA5Liq5paw55qE5a+56LGhIFxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IGRlZXBDb3B5KHBhcmVudClcclxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhjaGlsZClcclxuXHJcbiAgICBrZXlzLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICBpZiAoaGFzT3duKG9wdGlvbnMsIGtleSkpIHtcclxuICAgICAgICAgICAgaWYgKGlzQXJyYXkob3B0aW9uc1trZXldKSkge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9uc1trZXldID0gb3B0aW9uc1trZXldLmNvbmNhdChjaGlsZFtrZXldKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaGlsZFtrZXldID09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKG9wdGlvbnNba2V5XSwgY2hpbGRba2V5XSlcclxuICAgICAgICAgICAgICAgIH0gICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvcHRpb25zW2tleV0gPSBjaGlsZFtrZXldXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIFxyXG4gICAgcmV0dXJuIG9wdGlvbnNcclxufVxyXG5cclxuY29uc3Qgc3BlY2lhbENoYXJSRSA9IC9bXlxcd1xcLTpcXC5dL1xyXG5cclxuLy8g5ZCI5bm25bGe5oCnXHJcbmZ1bmN0aW9uIG1lcmdlQXR0cnMoZnJvbSwgdG8pIHtcclxuICAgIGNvbnN0IGF0dHJzID0gZnJvbS5hdHRyaWJ1dGVzXHJcbiAgICBsZXQgaSA9IGF0dHJzLmxlbmd0aFxyXG4gICAgbGV0IG5hbWUsIHZhbHVlXHJcbiAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgbmFtZSA9IGF0dHJzW2ldLm5hbWVcclxuICAgICAgICB2YWx1ZSA9IGF0dHJzW2ldLnZhbHVlLnRyaW0oKVxyXG4gICAgICAgIGlmICghdG8uaGFzQXR0cmlidXRlKG5hbWUpICYmICFzcGVjaWFsQ2hhclJFLnRlc3QobmFtZSkpIHtcclxuICAgICAgICAgICAgdG8uc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKVxyXG4gICAgICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ2NsYXNzJykge1xyXG4gICAgICAgICAgICB2YWx1ZS5zcGxpdCgvXFxzKy8pLmZvckVhY2goY2xzID0+IHtcclxuICAgICAgICAgICAgICAgIGFkZENsYXNzKHRvLCBjbHMpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbn1cclxuXHJcbi8vIOWwhmVs5YaF5a655pu/5o2i5Li65qih5p2/5YaF5a65XHJcbmZ1bmN0aW9uIHRyYW5zY2x1ZGUoZWwsIG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zLnRlbXBsYXRlKSB7XHJcbiAgICAgICAgLy8g5o+Q5Y+W57uE5Lu26YeM55qEc2xvdFxyXG4gICAgICAgIG9wdGlvbnMuX2NvbnRlbnQgPSBleHRyYWN0Q29udGVudChlbClcclxuICAgICAgICBcclxuICAgICAgICBsZXQgdGVtcGxhdGUgPSBvcHRpb25zLnRlbXBsYXRlLnRyaW0oKVxyXG4gICAgICAgIGNvbnN0IG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxyXG4gICAgICAgIG5vZGUuaW5uZXJIVE1MID0gdGVtcGxhdGVcclxuICAgICAgICBsZXQgZnJhZyA9IGV4dHJhY3RDb250ZW50KG5vZGUsIHRydWUpXHJcbiAgICAgICAgZnJhZyA9IGZyYWcuY2xvbmVOb2RlKHRydWUpXHJcblxyXG4gICAgICAgIGNvbnN0IHJlcGxhY2VyID0gZnJhZy5maXJzdENoaWxkXHJcbiAgICAgICAgbWVyZ2VBdHRycyhlbCwgcmVwbGFjZXIpXHJcbiAgICAgICAgcmV0dXJuIHJlcGxhY2VyXHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9cXC9dKShcXHcpL2dcclxuXHJcbmZ1bmN0aW9uIGNsYXNzaWZ5KHN0cikge1xyXG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKGNsYXNzaWZ5UkUsIHRvVXBwZXIpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlZ2lzdGVyQ29tcG9uZW50RXZlbnRzKHZtLCBlbCkge1xyXG4gICAgY29uc3Qgb25SZSA9IC9eKHYtb246fEApL1xyXG4gICAgY29uc3QgYXR0cnMgPSB0b0FycmF5KGVsLmF0dHJpYnV0ZXMpXHJcblxyXG4gICAgbGV0IG5hbWUsIHZhbHVlLCBoYW5kbGVyXHJcblxyXG4gICAgYXR0cnMuZm9yRWFjaChhdHRyID0+IHtcclxuICAgICAgICBuYW1lID0gYXR0ci5uYW1lLnRyaW0oKVxyXG4gICAgICAgIHZhbHVlID0gYXR0ci52YWx1ZS50cmltKClcclxuICAgICAgICBpZiAob25SZS50ZXN0KG5hbWUpKSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2Uob25SZSwgJycpXHJcbiAgICAgICAgICAgIHZhbHVlICs9ICcuYXBwbHkodGhpcywgdGhpcy4kYXJndW1lbnRzKSdcclxuICAgICAgICAgICAgaGFuZGxlciA9IHN0YXRlbWVudEhhbmRsZXIodm0uX2NvbnRleHQsIHZhbHVlKVxyXG4gICAgICAgICAgICB2bS4kb24obmFtZSwgaGFuZGxlcilcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59XHJcblxyXG5mdW5jdGlvbiBzdGF0ZW1lbnRIYW5kbGVyKHBhcmVudCwgdmFsdWUpIHtcclxuICAgIGNvbnN0IGdldCA9IG5ldyBGdW5jdGlvbigndm0nLCAncmV0dXJuIHZtLicgKyB2YWx1ZSlcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICBwYXJlbnQuJGFyZ3VtZW50cyA9IHRvQXJyYXkoYXJndW1lbnRzKVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGdldC5jYWxsKHBhcmVudCwgcGFyZW50KVxyXG4gICAgICAgIHBhcmVudC4kYXJndW1lbnRzID0gbnVsbFxyXG4gICAgICAgIHJldHVybiByZXN1bHRcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8vIOaPkOWPluWFg+e0oOmHjOmdoueahOWGheWuuVxyXG5mdW5jdGlvbiBleHRyYWN0Q29udGVudChlbCwgYXNGcmFnbWVudCkge1xyXG4gICAgbGV0IGNoaWxkLCByYXdDb250ZW50XHJcbiAgICBpZiAoZWwuaGFzQ2hpbGROb2RlcygpKSB7IFxyXG4gICAgICAgIHRyaW1Ob2RlKGVsKVxyXG4gICAgICAgIHJhd0NvbnRlbnQgPSBhc0ZyYWdtZW50ID8gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcclxuXHJcbiAgICAgICAgd2hpbGUgKGNoaWxkID0gZWwuZmlyc3RDaGlsZCkge1xyXG4gICAgICAgICAgICByYXdDb250ZW50LmFwcGVuZENoaWxkKGNoaWxkKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByYXdDb250ZW50XHJcbn1cclxuXHJcbi8vIOino+aekHNsb3RcclxuZnVuY3Rpb24gcmVzb2x2ZVNsb3RzKHZtLCBjb250ZW50KSB7XHJcbiAgICBpZiAoIWNvbnRlbnQpIHtcclxuICAgICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc3QgY29udGVudHMgPSB2bS5fc2xvdENvbnRlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKVxyXG4gICAgbGV0IG5hbWVcclxuICAgIHRvQXJyYXkoY29udGVudC5jaGlsZHJlbikuZm9yRWFjaChlbCA9PiB7XHJcbiAgICAgICAgaWYgKG5hbWUgPSBlbC5nZXRBdHRyaWJ1dGUoJ3Nsb3QnKSkge1xyXG4gICAgICAgICAgICAoY29udGVudHNbbmFtZV0gfHwgKGNvbnRlbnRzW25hbWVdID0gW10pKS5wdXNoKGVsKVxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICBcclxuICAgIC8vIOacieWQjeWtl+eahHNsb3RcclxuICAgIGZvciAobmFtZSBpbiBjb250ZW50cykge1xyXG4gICAgICAgIGNvbnRlbnRzW25hbWVdID0gZXh0cmFjdEZyYWdtZW50KGNvbnRlbnRzW25hbWVdLCBjb250ZW50KVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOayoeWQjeWtl+eahHNsb3RcclxuICAgIGlmIChjb250ZW50Lmhhc0NoaWxkTm9kZXMoKSkge1xyXG4gICAgICAgIGNvbnN0IG5vZGVzID0gY29udGVudC5jaGlsZE5vZGVzXHJcbiAgICAgICAgLy8g56m65paH5pys6IqC54K555u05o6l6Lev6L+HXHJcbiAgICAgICAgaWYgKG5vZGVzLmxlbmd0aCA9PT0gMSAmJiBub2Rlc1swXS5ub2RlVHlwZSA9PT0gMyAmJiAhbm9kZXNbMF0uZGF0YS50cmltKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnRlbnRzWydkZWZhdWx0J10gPSBleHRyYWN0RnJhZ21lbnQoY29udGVudC5jaGlsZE5vZGVzLCBjb250ZW50KVxyXG4gICAgICAgIFxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBleHRyYWN0RnJhZ21lbnQobm9kZXMsIHBhcmVudCkge1xyXG4gICAgY29uc3QgZnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKVxyXG4gICAgbGV0IGRpdiwgY2hpbGROb2Rlc1xyXG4gICAgbm9kZXMgPSB0b0FycmF5KG5vZGVzKVxyXG4gICAgXHJcbiAgICBub2Rlcy5mb3JFYWNoKG5vZGUgPT4ge1xyXG4gICAgICAgIC8vIOmdnuepuuaWh+acrOiKgueCuVxyXG4gICAgICAgIGlmICghaXNUcmltbWFibGUobm9kZSkpIHtcclxuICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKG5vZGUpXHJcbiAgICAgICAgICAgIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXHJcbiAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSBub2RlLmlubmVySFRNTFxyXG4gICAgICAgICAgICB0cmltTm9kZShkaXYpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjaGlsZE5vZGVzID0gdG9BcnJheShkaXYuY2hpbGROb2RlcylcclxuICAgICAgICAgICAgY2hpbGROb2Rlcy5mb3JFYWNoKGNoaWxkID0+IHtcclxuICAgICAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQoY2hpbGQpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIHJldHVybiBmcmFnXHJcbn1cclxuXHJcbiIsImltcG9ydCBEZXAgZnJvbSAnLi9kZXAuanMnXHJcbmltcG9ydCB7ZGVmLCBoYXNPd24sIGlzQXJyYXl9IGZyb20gJy4vdXRpbHMuanMnXHJcblxyXG4vLyDlnKjmlbDnu4Tljp/lnovkuIrlop7liqDkuIDngrnmlLnliqhcclxuXHJcbmNvbnN0IGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGVcclxuY29uc3QgYXJyYXlNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKVxyXG5cclxuY29uc3QgbWV0aG9kc1RvUGF0Y2ggPSBbXHJcbiAgICAncHVzaCcsXHJcbiAgICAncG9wJyxcclxuICAgICdzaGlmdCcsXHJcbiAgICAndW5zaGlmdCcsXHJcbiAgICAnc3BsaWNlJyxcclxuICAgICdzb3J0JyxcclxuICAgICdyZXZlcnNlJ1xyXG5dXHJcblxyXG5cclxubWV0aG9kc1RvUGF0Y2guZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XHJcbiAgICAvLyDnvJPlrZjljp/lnovoh6rouqvnmoTmlrnms5VcclxuICAgIGNvbnN0IG9yaWdpbmFsID0gYXJyYXlQcm90b1ttZXRob2RdXHJcbiAgICBkZWYoYXJyYXlNZXRob2RzLCBtZXRob2QsIGZ1bmN0aW9uIG11dGF0b3IoLi4uYXJncykge1xyXG4gICAgICAgIC8vIOWFiOaJp+ihjOWOn+Wei+iHqui6q+eahOaWueazlVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpXHJcbiAgICAgICAgY29uc3Qgb2IgPSB0aGlzLl9fb2JfX1xyXG4gICAgICAgIGxldCBpbnNlcnRlZFxyXG4gICAgICAgIHN3aXRjaCAobWV0aG9kKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3B1c2gnOlxyXG4gICAgICAgICAgICBjYXNlICd1bnNoaWZ0JzpcclxuICAgICAgICAgICAgICAgIGluc2VydGVkID0gYXJnc1xyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgY2FzZSAnc3BsaWNlJzpcclxuICAgICAgICAgICAgICAgIGluc2VydGVkID0gYXJncy5zbGljZSgyKVxyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGluc2VydGVkKSB7XHJcbiAgICAgICAgICAgIG9iLm9ic2VydmVBcnJheShpbnNlcnRlZClcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g6Kem5Y+R5L6d6LWW5pu05pawXHJcbiAgICAgICAgb2IuZGVwLm5vdGlmeSgpXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxyXG4gICAgfSlcclxufSlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9ic2VydmUodmFsdWUpIHtcclxuICAgIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIHJldHVyblxyXG4gICAgfVxyXG5cclxuICAgIGxldCBvYlxyXG4gICAgaWYgKGhhc093bih2YWx1ZSwgJ19fb2JfXycpICYmIHZhbHVlLl9fb2JfXyBpbnN0YW5jZW9mIE9ic2VydmVyKSB7XHJcbiAgICAgICAgb2IgPSB2YWx1ZS5fX29iX19cclxuICAgIH0gZWxzZSBpZiAoIXZhbHVlLl9pc1Z1ZSkge1xyXG4gICAgICAgIG9iID0gbmV3IE9ic2VydmVyKHZhbHVlKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvYlxyXG59XHJcblxyXG4vLyDlr7nmlbDmja7ov5vooYznm5HlkKxcclxuZnVuY3Rpb24gT2JzZXJ2ZXIodmFsdWUpIHtcclxuICAgIHRoaXMudmFsdWUgPSB2YWx1ZVxyXG4gICAgdGhpcy5kZXAgPSBuZXcgRGVwKClcclxuICAgIGRlZih2YWx1ZSwgJ19fb2JfXycsIHRoaXMpXHJcbiAgICBcclxuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIHZhbHVlLl9fcHJvdG9fXyA9IGFycmF5TWV0aG9kc1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZUFycmF5KHZhbHVlKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLndhbGsodmFsdWUpXHJcbiAgICAgICAgXHJcbiAgICB9XHJcbiAgICBcclxufVxyXG5cclxuXHJcbk9ic2VydmVyLnByb3RvdHlwZSA9IHtcclxuICAgIHdhbGsob2JqKSB7XHJcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaikgXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGtleXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgZGVmaW5lUmVhY3RpdmUob2JqLCBrZXlzW2ldLCBvYmpba2V5c1tpXV0pXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBvYnNlcnZlQXJyYXkoYXJyeSkge1xyXG4gICAgICAgIGFycnkuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgb2JzZXJ2ZShpdGVtKVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZShvYmosIGtleSwgdmFsKSB7XHJcbiAgICBjb25zdCBkZXAgPSBuZXcgRGVwKClcclxuICAgIC8vIOmAkuW9kuebkeWQrFxyXG4gICAgbGV0IGNoaWxkT2IgPSBvYnNlcnZlKHZhbClcclxuICAgIFxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgZ2V0KCkgeyAgICAgIFxyXG4gICAgICAgICAgICAvLyDmlLbpm4blr7nlupTnmoTop4Llr5/ogIXlr7nosaFcclxuICAgICAgICAgICAgaWYgKERlcC50YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIGRlcC5kZXBlbmQoKVxyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkT2IpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGlzQXJyYXkodmFsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGUsIGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlID0gdmFsW2ldXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgJiYgZS5fX29iX18gJiYgZS5fX29iX18uZGVwLmRlcGVuZCgpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB2YWxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldChuZXdWYWwpIHtcclxuICAgICAgICAgICAgaWYgKHZhbCA9PT0gbmV3VmFsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YWwgPSBuZXdWYWxcclxuICAgICAgICAgICAgLy8g6YCS5b2S55uR5ZCsXHJcbiAgICAgICAgICAgIGNoaWxkT2IgPSBvYnNlcnZlKG5ld1ZhbClcclxuICAgICAgICAgICAgLy8g6Kem5Y+R5pu05pawXHJcbiAgICAgICAgICAgIGRlcC5ub3RpZnkoKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiB0b0FycmF5KGFycnksIGluZGV4KSB7XHJcbiAgICBpbmRleCA9IGluZGV4IHx8IDBcclxuICAgIHJldHVybiBbLi4uYXJyeV0uc2xpY2UoaW5kZXgpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlKG9sZE5vZGUsIG5ld05vZGUpIHtcclxuICAgIGNvbnN0IHBhcmVudCA9IG9sZE5vZGUucGFyZW50Tm9kZTtcclxuICAgIGlmIChwYXJlbnQpIHtcclxuICAgICAgICBwYXJlbnQucmVwbGFjZUNoaWxkKG5ld05vZGUsIG9sZE5vZGUpXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQodG8sIGZyb20pIHtcclxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhmcm9tKVxyXG4gICAgbGV0IGkgPSBrZXlzLmxlbmd0aFxyXG4gICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgIHRvW2tleXNbaV1dID0gZnJvbVtrZXlzW2ldXVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvbihlbCwgZXZlbnQsIGNiLCB1c2VDYXB0dXJlKSB7XHJcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYiwgdXNlQ2FwdHVyZSlcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9mZihlbCwgZXZlbnQsIGNiKSB7XHJcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBjYilcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGJpbmQoZm4sIGN0eCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgbGV0IGwgPSBhcmd1bWVudHMubGVuZ3RoXHJcbiAgICAgICAgcmV0dXJuIGwgPyBsID4gMSA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKSA6IGZuLmNhbGwoY3R4LCBhKSA6IGZuLmNhbGwoY3R4KVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGVmKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xyXG4gICAgICAgIHZhbHVlOiB2YWwsXHJcbiAgICAgICAgZW51bWVyYWJsZTogISFlbnVtZXJhYmxlLFxyXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSlcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGhhc093bihvYmosIGtleSkge1xyXG4gICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdChvYmopIHtcclxuICAgIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcclxufVxyXG5cclxuY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXlcclxuZXhwb3J0IHtpc0FycmF5fVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEF0dHIobm9kZSwgX2F0dHIpIHtcclxuICAgIGNvbnN0IHZhbCA9IG5vZGUuZ2V0QXR0cmlidXRlKF9hdHRyKVxyXG4gICAgaWYgKHZhbCAhPT0gbnVsbCkge1xyXG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKF9hdHRyKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbFxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmluZEF0dHIobm9kZSwgbmFtZSkge1xyXG4gICAgbGV0IHZhbCA9IGdldEF0dHIobm9kZSwgJzonICsgbmFtZSlcclxuICAgIGlmICh2YWwgPT09IG51bGwpIHtcclxuICAgICAgICB2YWwgPSBnZXRBdHRyKG5vZGUsICd2LWJpbmQ6JyArIG5hbWUpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmUoZWwpIHtcclxuICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbnNlcnQobmV3Tm9kZSwgb2xkTm9kZSkge1xyXG4gICAgb2xkTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdOb2RlLCBvbGROb2RlKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkQ2xhc3MoZWwsIGNscykge1xyXG4gICAgZWwuY2xhc3NMaXN0LmFkZChjbHMpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBxdWVyeShlbCkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBlbCA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKSA6IGVsO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWFrZUdldHRlckZuKGJvZHkpIHtcclxuICAgIHJldHVybiBuZXcgRnVuY3Rpb24oJ3ZtJywgJ3JldHVybiB2bS4nICsgYm9keSlcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZpcnN0V29yZHRvVXBwZXIoc3RyKSB7XHJcbiAgICByZXR1cm4gc3RyLnN1YnN0cmluZygwLCAxKS50b1VwcGVyQ2FzZSgpICsgc3RyLnN1YnN0cmluZygxKVxyXG59XHJcblxyXG4vLyDljrvpmaTnqbrmlofmnKzoioLngrlcclxuZXhwb3J0IGZ1bmN0aW9uIHRyaW1Ob2RlKG5vZGUpIHtcclxuICAgIGxldCBjaGlsZFxyXG4gICAgd2hpbGUgKChjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZCwgaXNUcmltbWFibGUoY2hpbGQpKSkge1xyXG4gICAgICAgIG5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpXHJcbiAgICB9XHJcbiAgICB3aGlsZSAoKGNoaWxkID0gbm9kZS5sYXN0Q2hpbGQsIGlzVHJpbW1hYmxlKGNoaWxkKSkpIHtcclxuICAgICAgICBub2RlLnJlbW92ZUNoaWxkKGNoaWxkKVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyDmmK/lkKbkuLrnqbrmlofmnKzoioLngrlcclxuZXhwb3J0IGZ1bmN0aW9uIGlzVHJpbW1hYmxlKG5vZGUpIHtcclxuICAgIHJldHVybiBub2RlICYmIChub2RlLm5vZGVUeXBlID09PSAzICYmICFub2RlLmRhdGEudHJpbSgpIHx8IG5vZGUubm9kZVR5cGUgPT09IDgpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b1VwcGVyKF8sIGMpIHtcclxuICAgIHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJydcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZXBDb3B5KG9iaikge1xyXG4gICAgaWYgKHR5cGVvZiBvYmogIT0gJ29iamVjdCcpIHtcclxuICAgICAgICByZXR1cm4gb2JqXHJcbiAgICB9XHJcbiAgICBsZXQgbmV3b2JqID0ge31cclxuXHJcbiAgICBpZiAoaXNBcnJheShvYmopKSB7XHJcbiAgICAgICAgbmV3b2JqID0gW11cclxuICAgIH0gXHJcblxyXG4gICAgZm9yIChsZXQga2V5IGluIG9iaikge1xyXG4gICAgICAgIG5ld29ialtrZXldID0gZGVlcENvcHkob2JqW2tleV0pXHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3b2JqXHJcbn0iLCJpbXBvcnQgRGVwIGZyb20gJy4vZGVwLmpzJ1xyXG5pbXBvcnQge2lzT2JqZWN0LCBleHRlbmQsIG1ha2VHZXR0ZXJGbiwgaXNBcnJheX0gZnJvbSAnLi91dGlscy5qcydcclxuXHJcbi8vIHdhdGNoZXLlrp7kvovnmoRJRCDmr4/kuKp3YXRjaGVy5a6e546w55qESUTpg73mmK/llK/kuIDnmoRcclxubGV0IHVpZCA9IDBcclxuXHJcbi8vIGV4cE9yRm7kuLrooajovr7lvI/miJbkuIDkuKrlj5jph4/lkI1cclxuZXhwb3J0IGZ1bmN0aW9uIFdhdGNoZXIodm0sIGV4cE9yRm4sIGNhbGxiYWNrLCBvcHRpb25zKSB7XHJcbiAgICB2bS5fd2F0Y2hlcnMucHVzaCh0aGlzKVxyXG5cclxuICAgIGlmIChvcHRpb25zKSB7XHJcbiAgICAgICAgZXh0ZW5kKHRoaXMsIG9wdGlvbnMpXHJcbiAgICB9XHJcbiAgICBcclxuICAgIHRoaXMuaWQgPSB1aWQrK1xyXG4gICAgdGhpcy52bSA9IHZtXHJcbiAgICB0aGlzLmV4cHJlc3Npb24gPSBleHBPckZuICAgXHJcbiAgICBcclxuICAgIC8vIHByb3Bz6ZyA6KaB55So5YiwXHJcbiAgICB0aGlzLnN5bmMgPSBvcHRpb25zPyBvcHRpb25zLnN5bmMgOiBmYWxzZVxyXG4gICAgXHJcbiAgICAvLyDorqHnrpflsZ7mgKfpnIDopoHnlKjliLBcclxuICAgIHRoaXMuZGlydHkgPSB0aGlzLmxhenlcclxuXHJcbiAgICAvLyDlrZjmlL5kZXDlrp7kvotcclxuICAgIHRoaXMuZGVwcyA9IFtdXHJcblxyXG4gICAgLy8g5a2Y5pS+ZGVw55qESURcclxuICAgIHRoaXMuZGVwSWRzID0gbmV3IFNldCgpXHJcblxyXG4gICAgLy8g5pu05paw6Kem5Y+R5Zue6LCD5Ye95pWwXHJcbiAgICB0aGlzLmNiID0gY2FsbGJhY2tcclxuXHJcbiAgICBpZiAodHlwZW9mIGV4cE9yRm4gPT09ICdmdW5jdGlvbicpIHsgICAgXHJcbiAgICAgICAgdGhpcy5nZXR0ZXIgPSBleHBPckZuXHJcbiAgICAgICAgdGhpcy5zZXR0ZXIgPSB1bmRlZmluZWRcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgcmVzID0gcGFyc2VFeHByZXNzaW9uKGV4cE9yRm4pXHJcbiAgICAgICAgdGhpcy5nZXR0ZXIgPSByZXMuZ2V0XHJcbiAgICAgICAgdGhpcy5zZXR0ZXIgPSAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgdm1bZXhwT3JGbl0gPSB2YWx1ZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIOWcqOWIm+W7undhdGNoZXLlrp7kvovml7blhYjlj5bkuIDmrKHlgLxcclxuICAgIHRoaXMudmFsdWUgPSB0aGlzLmdldCgpXHJcbn1cclxuXHJcbldhdGNoZXIucHJvdG90eXBlID0ge1xyXG4gICAgZ2V0KCkge1xyXG4gICAgICAgIGNvbnN0IHZtID0gdGhpcy52bVxyXG4gICAgICAgIC8vIOWcqOivu+WPluWAvOaXtuWFiOWwhuinguWvn+iAheWvueixoei1i+WAvOe7mURlcC50YXJnZXQg5ZCm5YiZRGVwLnRhcmdldOS4uuepuiDkuI3kvJrop6blj5HmlLbpm4bkvp3otZZcclxuICAgICAgICBEZXAudGFyZ2V0ID0gdGhpc1xyXG4gICAgICAgIGxldCB2YWx1ZSA9ICB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSlcclxuICAgICAgICBpZiAodGhpcy5maWx0ZXJzKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdm0uX2FwcGx5RmlsdGVycyh2YWx1ZSwgdGhpcy5maWx0ZXJzKVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDop6blj5Hkvp3otZblkI7nva7kuLrnqbpcclxuICAgICAgICBEZXAudGFyZ2V0ID0gbnVsbFxyXG4gICAgICAgIHJldHVybiB2YWx1ZVxyXG4gICAgfSxcclxuXHJcbiAgICBzZXQodmFsdWUpIHtcclxuICAgICAgICB0aGlzLnNldHRlci5jYWxsKHRoaXMudm0sIHZhbHVlKVxyXG4gICAgfSxcclxuXHJcbiAgICB1cGRhdGUoKSB7XHJcbiAgICAgICAgLy8g6Kem5Y+R5pu05paw5ZCO5omn6KGM5Zue6LCD5Ye95pWwXHJcbiAgICAgICAgLy8g5aaC5p6c5rKh5pyJ5ZCM5q2l5qCH6K6wIOWImeW8guatpeabtOaWsFxyXG4gICAgICAgIC8vIOWBh+iuvuWOn+adpeWcqOS4gOS4quWHveaVsOmHjOWQjOaXtuaJp+ihjGFnZSsrIDTmrKEg5YiZ5Lya5omn6KGM5Zue6LCD5Ye95pWwNOasoSBcclxuICAgICAgICAvLyDlvILmraXmm7TmlrDliJnkvJrmiafooYzkuIDmrKEg5LyY5YyW5oCn6IO9XHJcbiAgICAgICAgaWYgKHRoaXMubGF6eSkge1xyXG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZVxyXG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuc3luYykge1xyXG4gICAgICAgICAgICBwdXNoV2F0Y2hlcih0aGlzKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucnVuKClcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHJ1bigpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0KClcclxuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMudmFsdWVcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWVcclxuICAgICAgICBpZiAodmFsdWUgIT09IG9sZFZhbHVlIHx8IGlzT2JqZWN0KHZhbHVlKSkge1xyXG4gICAgICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgYWRkRGVwKGRlcCkge1xyXG4gICAgICAgIC8vIOinpuWPkeS+nei1liBkZXDmt7vliqDop4Llr5/ogIXlr7nosaEg5ZCM5pe26KeC5a+f6ICF5a+56LGh5Lmf5Lya5bCGZGVw5a6e5L6L5re75Yqg5Yiw6Ieq5bex55qEZGVwc+mHjFxyXG4gICAgICAgIC8vIOWmguaenGRlcOW3sue7j+WtmOWcqGRlcHPph4wg5YiZ5LiN5re75YqgXHJcbiAgICAgICAgLy8gZGVw5Lit5a2Y5pS+552A5a+55bqU55qEd2F0Y2hlciB3YXRjaGVy5Lit5Lmf5Lya5a2Y5pS+552A5a+55bqU55qEZGVwXHJcbiAgICAgICAgLy8g5LiA5LiqZGVw5Y+v6IO95pyJ5aSa5Liqd2F0Y2hlciDkuIDkuKp3YXRjaGVy5Lmf5Y+v6IO95a+55bqU552A5aSa5LiqZGVwXHJcbiAgICAgICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoZGVwLmlkKSkge1xyXG4gICAgICAgICAgICB0aGlzLmRlcHMucHVzaChkZXApXHJcbiAgICAgICAgICAgIHRoaXMuZGVwSWRzLmFkZChkZXAuaWQpXHJcbiAgICAgICAgICAgIGRlcC5hZGRTdWIodGhpcylcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHRlYXJkb3duKCkge1xyXG4gICAgICAgIHRoaXMudm0uX3dhdGNoZXJzLnNwbGljZSh0aGlzLnZtLl93YXRjaGVycy5pbmRleE9mKHRoaXMpLCAxKVxyXG4gICAgICAgIGxldCBpID0gdGhpcy5kZXBzLmxlbmd0aFxyXG4gICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgIHRoaXMuZGVwc1tpXS5yZW1vdmVTdWIodGhpcylcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy52bSA9IHRoaXMuY2IgPSB0aGlzLnZhbHVlID0gbnVsbFxyXG4gICAgfSxcclxuXHJcbiAgICBldmFsdWF0ZSgpIHtcclxuICAgICAgICBjb25zdCBjdXJyZW50ID0gRGVwLnRhcmdldFxyXG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmdldCgpXHJcbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlXHJcbiAgICAgICAgRGVwLnRhcmdldCA9IGN1cnJlbnRcclxuICAgIH0sXHJcblxyXG4gICAgZGVwZW5kKCkge1xyXG4gICAgICAgIHRoaXMuZGVwcy5mb3JFYWNoKGRlcCA9PiB7XHJcbiAgICAgICAgICAgIGRlcC5kZXBlbmQoKVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIOWmguaenOimgeWvuXt7b2JqLmEuYi5tc2d9fSDmsYLlgLwg5YiZ5bu65LiA5Liq5Ye95pWwIOi/lOWbniB2bS5vYmouYS5iLm1zZyDlgLxcclxuZnVuY3Rpb24gcGFyc2VFeHByZXNzaW9uKGV4cCkge1xyXG4gICAgZXhwID0gZXhwLnRyaW0oKVxyXG4gICAgY29uc3QgcmVzID0ge2V4cH1cclxuICAgIHJlcy5nZXQgPSBtYWtlR2V0dGVyRm4oZXhwKVxyXG4gICAgcmV0dXJuIHJlc1xyXG59XHJcblxyXG5jb25zdCBxdWV1ZSA9IFtdXHJcbmxldCBoYXMgPSB7fVxyXG5sZXQgd2FpdGluZyA9IGZhbHNlXHJcblxyXG5mdW5jdGlvbiBwdXNoV2F0Y2hlcih3YXRjaGVyKSB7XHJcbiAgICBjb25zdCBpZCA9IHdhdGNoZXIuaWRcclxuICAgIC8vIOWmguaenOW3sue7j+acieebuOWQjOeahHdhdGNoZXLliJnkuI3mt7vliqAg6Ziy5q2i6YeN5aSN5pu05pawXHJcbiAgICBpZiAoaGFzW2lkXSA9PSBudWxsKSB7XHJcbiAgICAgICAgaGFzW2lkXSA9IHF1ZXVlLmxlbmd0aFxyXG4gICAgICAgIHF1ZXVlLnB1c2god2F0Y2hlcilcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKCF3YWl0aW5nKSB7XHJcbiAgICAgICAgd2FpdGluZyA9IHRydWVcclxuICAgICAgICBuZXh0VGljayhmbHVzaFF1ZXVlKVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBmbHVzaFF1ZXVlKCkge1xyXG4gICAgcXVldWUuZm9yRWFjaChxID0+IHtcclxuICAgICAgICBxLnJ1bigpXHJcbiAgICB9KVxyXG4gICAgXHJcbiAgICAvLyDph43nva5cclxuICAgIHdhaXRpbmcgPSBmYWxzZVxyXG4gICAgaGFzID0ge31cclxuICAgIHF1ZXVlLmxlbmd0aCA9IDBcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG5leHRUaWNrKGNiLCBjdHgpIHtcclxuICAgIGNvbnN0IHAgPSBQcm9taXNlLnJlc29sdmUoKVxyXG4gICAgcC50aGVuKCgpID0+IHtcclxuICAgICAgICBjdHg/IGNiLmNhbGwoY3R4KSA6IGNiKClcclxuICAgIH0pXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9