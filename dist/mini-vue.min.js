!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!g[e]||!_[e])return;for(var n in _[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(p[n]=t[n]);0==--y&&0===b&&x()}(e,n),t&&t(e,n)};var n,i=!0,r="e0be76621c0d938e625d",o=1e4,s={},c=[],a=[];function u(e){var t=A[e];if(!t)return S;var i=function(i){return t.hot.active?(A[i]?-1===A[i].parents.indexOf(e)&&A[i].parents.push(e):(c=[e],n=i),-1===t.children.indexOf(i)&&t.children.push(i)):(console.warn("[HMR] unexpected require("+i+") from disposed module "+e),c=[]),S(i)},r=function(e){return{configurable:!0,enumerable:!0,get:function(){return S[e]},set:function(t){S[e]=t}}};for(var o in S)Object.prototype.hasOwnProperty.call(S,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(i,o,r(o));return i.e=function(e){return"ready"===l&&f("prepare"),b++,S.e(e).then(t,function(e){throw t(),e});function t(){b--,"prepare"===l&&(m[e]||E(e),0===b&&0===y&&x())}},i.t=function(e,t){return 1&t&&(e=i(e)),S.t(e,-2&t)},i}var d=[],l="idle";function f(e){l=e;for(var t=0;t<d.length;t++)d[t].call(null,e)}var h,p,v,y=0,b=0,m={},_={},g={};function w(e){return+e+""===e?+e:e}function j(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return i=e,f("check"),function(e){return e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var i=new XMLHttpRequest,o=S.p+""+r+".hot-update.json";i.open("GET",o,!0),i.timeout=e,i.send(null)}catch(e){return n(e)}i.onreadystatechange=function(){if(4===i.readyState)if(0===i.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===i.status)t();else if(200!==i.status&&304!==i.status)n(new Error("Manifest request to "+o+" failed."));else{try{var e=JSON.parse(i.responseText)}catch(e){return void n(e)}t(e)}}})}(o).then(function(e){if(!e)return f("idle"),null;_={},m={},g=e.c,v=e.h,f("prepare");var t=new Promise(function(e,t){h={resolve:e,reject:t}});p={};return E(0),"prepare"===l&&0===b&&0===y&&x(),t})}function E(e){g[e]?(_[e]=!0,y++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=S.p+""+e+"."+r+".hot-update.js",t.appendChild(n)}(e)):m[e]=!0}function x(){f("ready");var e=h;if(h=null,e)if(i)Promise.resolve().then(function(){return O(i)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in p)Object.prototype.hasOwnProperty.call(p,n)&&t.push(w(n));e.resolve(t)}}function O(t){if("ready"!==l)throw new Error("apply() is only allowed in ready status");var n,i,o,a,u;function d(e){for(var t=[e],n={},i=t.slice().map(function(e){return{chain:[e],id:e}});i.length>0;){var r=i.pop(),o=r.id,s=r.chain;if((a=A[o])&&!a.hot._selfAccepted){if(a.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:o};if(a.hot._main)return{type:"unaccepted",chain:s,moduleId:o};for(var c=0;c<a.parents.length;c++){var u=a.parents[c],d=A[u];if(d){if(d.hot._declinedDependencies[o])return{type:"declined",chain:s.concat([u]),moduleId:o,parentId:u};-1===t.indexOf(u)&&(d.hot._acceptedDependencies[o]?(n[u]||(n[u]=[]),h(n[u],[o])):(delete n[u],t.push(u),i.push({chain:s.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function h(e,t){for(var n=0;n<t.length;n++){var i=t[n];-1===e.indexOf(i)&&e.push(i)}}t=t||{};var y={},b=[],m={},_=function(){console.warn("[HMR] unexpected require("+E.moduleId+") to disposed module")};for(var j in p)if(Object.prototype.hasOwnProperty.call(p,j)){var E;u=w(j);var x=!1,O=!1,D=!1,P="";switch((E=p[j]?d(u):{type:"disposed",moduleId:j}).chain&&(P="\nUpdate propagation: "+E.chain.join(" -> ")),E.type){case"self-declined":t.onDeclined&&t.onDeclined(E),t.ignoreDeclined||(x=new Error("Aborted because of self decline: "+E.moduleId+P));break;case"declined":t.onDeclined&&t.onDeclined(E),t.ignoreDeclined||(x=new Error("Aborted because of declined dependency: "+E.moduleId+" in "+E.parentId+P));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(E),t.ignoreUnaccepted||(x=new Error("Aborted because "+u+" is not accepted"+P));break;case"accepted":t.onAccepted&&t.onAccepted(E),O=!0;break;case"disposed":t.onDisposed&&t.onDisposed(E),D=!0;break;default:throw new Error("Unexception type "+E.type)}if(x)return f("abort"),Promise.reject(x);if(O)for(u in m[u]=p[u],h(b,E.outdatedModules),E.outdatedDependencies)Object.prototype.hasOwnProperty.call(E.outdatedDependencies,u)&&(y[u]||(y[u]=[]),h(y[u],E.outdatedDependencies[u]));D&&(h(b,[E.moduleId]),m[u]=_)}var M,k=[];for(i=0;i<b.length;i++)u=b[i],A[u]&&A[u].hot._selfAccepted&&k.push({module:u,errorHandler:A[u].hot._selfAccepted});f("dispose"),Object.keys(g).forEach(function(e){!1===g[e]&&function(e){delete installedChunks[e]}(e)});for(var N,H,T=b.slice();T.length>0;)if(u=T.pop(),a=A[u]){var $={},I=a.hot._disposeHandlers;for(o=0;o<I.length;o++)(n=I[o])($);for(s[u]=$,a.hot.active=!1,delete A[u],delete y[u],o=0;o<a.children.length;o++){var F=A[a.children[o]];F&&((M=F.parents.indexOf(u))>=0&&F.parents.splice(M,1))}}for(u in y)if(Object.prototype.hasOwnProperty.call(y,u)&&(a=A[u]))for(H=y[u],o=0;o<H.length;o++)N=H[o],(M=a.children.indexOf(N))>=0&&a.children.splice(M,1);for(u in f("apply"),r=v,m)Object.prototype.hasOwnProperty.call(m,u)&&(e[u]=m[u]);var C=null;for(u in y)if(Object.prototype.hasOwnProperty.call(y,u)&&(a=A[u])){H=y[u];var K=[];for(i=0;i<H.length;i++)if(N=H[i],n=a.hot._acceptedDependencies[N]){if(-1!==K.indexOf(n))continue;K.push(n)}for(i=0;i<K.length;i++){n=K[i];try{n(H)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:u,dependencyId:H[i],error:e}),t.ignoreErrored||C||(C=e)}}}for(i=0;i<k.length;i++){var L=k[i];u=L.module,c=[u];try{S(u)}catch(e){if("function"==typeof L.errorHandler)try{L.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:n,originalError:e}),t.ignoreErrored||C||(C=n),C||(C=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:u,error:e}),t.ignoreErrored||C||(C=e)}}return C?(f("fail"),Promise.reject(C)):(f("idle"),new Promise(function(e){e(b)}))}var A={};function S(t){if(A[t])return A[t].exports;var i=A[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var i=0;i<e.length;i++)t._acceptedDependencies[e[i]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:j,apply:O,status:function(e){if(!e)return l;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var t=d.indexOf(e);t>=0&&d.splice(t,1)},data:s[e]};return n=void 0,t}(t),parents:(a=c,c=[],a),children:[]};return e[t].call(i.exports,i,i.exports,u(t)),i.l=!0,i.exports}S.m=e,S.c=A,S.d=function(e,t,n){S.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},S.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},S.t=function(e,t){if(1&t&&(e=S(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(S.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)S.d(n,i,function(t){return e[t]}.bind(null,i));return n},S.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return S.d(t,"a",t),t},S.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},S.p="",S.h=function(){return r},u("./src/main.js")(S.s="./src/main.js")}({"./src/compile.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){h(t)||t.hasChildNodes()&&function e(t){t.forEach(function(t){var n=h(t);n||t.hasChildNodes()&&e(t.childNodes)})}(t.childNodes);if(!f){var n=void 0,i=void 0;for(f=!0,function(e){e.forEach(function(e){e.def.priority||(e.def.priority=1e3)}),e.sort(function(e,t){return t.def.priority-e.def.priority})}(l);l.length;)i=l.shift(),(n=new r.default(i,e))._bind(),e._directives.push(n);f=!1,setTimeout(function(){!function(e){var t=document.body,n=t.contains,i=e._directives,r=void 0,o=[],s=void 0;for(;i.length;)s=i.shift(),r=s.descriptor.attr,n.call(t,s.el)||"v-for"===r||"v-if"===r?o.push(s):s._teardown();e._directives=[].concat(o),o.length=0}(e)},0)}};var i=s(n("./src/handlers.js")),r=s(n("./src/directives.js")),o=n("./src/utils.js");function s(e){return e&&e.__esModule?e:{default:e}}var c=/^(v-on:|@)/,a=/^v-([^:]+)(?:$|:(.*)$)/,u=/^(v-bind:|:)/,d=/\{\{\{((?:.|\n)+?)\}\}\}|\{\{((?:.|\n)+?)\}\}/g,l=[],f=!1;function h(e){var t=e.nodeType;return 1==t?function(e){if(e.hasAttributes()){var t=void 0,n=!1,r=(0,o.toArray)(e.attributes);return r.forEach(function(r){var o=r.name.trim(),s=r.value.trim();c.test(o)?(e.removeAttribute(o),l.push({el:e,arg:o.replace(c,""),name:"on",attr:o,expression:s,def:i.default.on})):u.test(o)?(i.default[t[1]],e.removeAttribute(o),l.push({el:e,arg:o.replace(u,""),name:"bind",attr:o,expression:s,def:i.default.bind})):(t=o.match(a))&&("v-else"!==o&&(e.removeAttribute(o),l.push({el:e,arg:void 0,name:o.replace(/^v-/,""),attr:o,expression:s,def:i.default[t[1]]})),"v-for"==o&&(n=!0))}),n}}(e):3==t?function(e){var t=function(e){var t=0,n=0,i=void 0,r=[];for(;i=d.exec(e);)(t=i.index)>n&&r.push({value:e.slice(n,t)}),r.push({value:i[2],tag:!0}),n=t+i[0].length;n<e.length&&r.push({value:e.slice(n)});return r}(e.nodeValue);if(!t)return;var n=document.createDocumentFragment(),r=void 0;t.forEach(function(e){r=e.tag?function(e){var t=document.createTextNode(" ");if(e.descriptor)return;return e.descriptor={el:t,name:"text",def:i.default.text,expression:e.value.trim()},t}(e):document.createTextNode(e.value),n.appendChild(r),e.tag&&l.push(e.descriptor)}),(0,o.replace)(e,n)}(e):void 0}},"./src/dep.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=r;var i=0;function r(){this.id=i++,this.subs=[]}r.target=null,r.prototype={depend:function(){r.target&&r.target.addDep(this)},addSub:function(e){this.subs.push(e)},removeSub:function(e){var t=this.subs.indexOf(e);t>-1&&this.subs.splice(t,1)},notify:function(){this.subs.forEach(function(e){e.update()})}}},"./src/directives.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=o;var i=n("./src/utils.js"),r=function(e){return e&&e.__esModule?e:{default:e}}(n("./src/watcher.js"));function o(e,t){this.vm=t,this.descriptor=e,this.expression=e.expression,this.el=e.el}o.prototype={_bind:function(){var e=this.descriptor.def;"function"==typeof e?this.update=e:(0,i.extend)(this,e),this.bind&&this.bind();var t=this;this.update&&(this._update=function(e,n){t.update(e,n)});var n=this._watcher=new r.default(this.vm,this.expression,this._update);this.update&&this.update(n.value)},set:function(e){this._watcher.set(e)},_teardown:function(e){this.unbind&&this.unbind(),this._watcher&&this._watcher.teardown(),this.vm=this.el=this._watcher=null}}},"./src/handlers.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=n("./src/utils.js"),o=function(e){return e&&e.__esModule?e:{default:e}}(n("./src/compile.js"));var s={text:{bind:function(){var e=this;this.listener=function(){e.set(this.value)},(0,r.on)(this.el,"input",this.listener)},update:function(e){this.el.value=e},unbind:function(){(0,r.off)(this.el,"input",this.listener)}},select:{bind:function(){var e=this,t=this.el,n=this.multiple=t.hasAttribute("multiple");this.listener=function(){var i=c(t,n);e.set(i)},(0,r.on)(t,"change",this.listener),c(t,n,!0)},update:function(e){var t=this.el;t.selectedIndex=-1;for(var n=this.multiple&&(0,r.isArray)(e),i=t.options,o=i.length,s=void 0,c=void 0;o--;)c=(s=i[o]).value,s.selected=n?e.indexOf(c)>-1:e==c},unbind:function(){(0,r.off)(this.el,"change",this.listener)}},radio:{bind:function(){var e=this;this.el;this.listener=function(){e.set(this.value)},(0,r.on)(this.el,"change",this.listener)},update:function(e){var t=this.el;t.checked=t.value==e},unbind:function(){(0,r.off)(this.el,"change",this.listener)}},checkbox:{bind:function(){var e=this,t=this.el;this.listener=function(){var n=t.checked,i=e._watcher.get();if((0,r.isArray)(i)){var o=i.indexOf(this.value);n?-1==o&&e.set(i.concat(this.value)):e.set(i.slice(0,o).concat(i.slice(o+1)))}else e.set(n)},(0,r.on)(t,"change",this.listener)},update:function(e){var t=this.el;(0,r.isArray)(e)?t.checked=e.indexOf(t.value)>-1:t.checked=!!e},unbind:function(){(0,r.off)(el,"change",this.listener)}}};function c(e,t,n){for(var i=t?[]:null,r=void 0,o=0,s=e.options.length;o<s;o++)if(r=e.options[o],n?r.hasAttribute("selected"):r.selected){if(!t)return r.value;i.push(r.value)}return i}t.default={text:{bind:function(){this.attr=3===this.el.nodeType?"data":"textContent"},update:function(e){this.el[this.attr]=e}},on:{priority:700,bind:function(){this.appFn=null},update:function(e){this.appFn&&(0,r.off)(this.el,this.descriptor.arg,this.appFn),this.appFn=(0,r.bind)(e,this.vm),(0,r.on)(this.el,this.descriptor.arg,this.appFn)},unbind:function(){this.appFn&&(0,r.off)(this.el,this.descriptor.arg,this.appFn)}},bind:{priority:850,bind:function(){this.attr=this.descriptor.arg},update:function(e){this.el.setAttribute(this.attr,e)}},model:{priority:800,bind:function(){var e=this.el,t=void 0;switch(e.tagName){case"INPUT":t=s[e.type]||s.text;break;case"TEXTAREA":t=s.text;break;case"SELECT":t=s.select;break;default:return}t.bind.call(this),this.update=t.update}},html:{update:function(e){this.el.innerHTML=e}},show:{update:function(e){this.el.style.display=e?"":"none"}},if:{priority:2100,bind:function(){var e=this.el,t=e.nextElementSibling;t&&null!==(0,r.getAttr)(t,"v-else")&&((0,r.remove)(t),this.elseEl=t),this.anchor=document.createTextNode(""),(0,r.replace)(e,this.anchor),this.isFirst=!0},update:function(e){var t=this;e?(this.cloneElseEl&&(0,r.remove)(this.cloneElseEl),this.isFirst?(this.isFirst=!1,setTimeout(function(){t.cloneEl=t.el.cloneNode(!0),(0,r.insertNode)(t.cloneEl,t.anchor)},0)):(this.cloneEl=this.el.cloneNode(!0),(0,r.insertNode)(this.cloneEl,this.anchor))):(this.cloneEl&&(0,r.remove)(this.cloneEl),this.isFirst?(this.isFirst=!1,setTimeout(function(){t.cloneElseEl=t.elseEl.cloneNode(!0),(0,r.insertNode)(t.cloneElseEl,t.anchor)},0)):(this.cloneElseEl=this.elseEl.cloneNode(!0),(0,r.insertNode)(this.cloneElseEl,this.anchor)))}},for:{priority:2200,bind:function(){var e=this.expression.match(/(.*) (?:in|of) (.*)/);if(e){var t=e[1].match(/\((.*),(.*)\)/);t?(this.valueKey=t[1].trim(),this.indexKey=t[2].trim()):this.valueKey=e[1].trim()}else this.valueKey=e[1].trim();this.expression=e[2].trim(),this.anchor=document.createTextNode(""),this.frag=document.createDocumentFragment(),(0,r.replace)(this.el,this.anchor)},update:function(e){if(this.len)for(;this.len--;)(0,r.remove)(this.anchor.previousElementSibling);var t=void 0,n=void 0,s=void 0,c=void 0;if("object"===(void 0===e?"undefined":i(e))){for(var a in this.len=0,e)this.len++,c=(t=this.el.cloneNode(!0)).innerHTML,this.valueKey&&(n=new RegExp("{{\\s*"+this.valueKey+"\\s*}}","g"),c=c.replace(n,e[a])),this.indexKey&&(s=new RegExp("{{\\s*"+this.indexKey+"\\s*}}","g"),c=c.replace(s,a)),t.innerHTML=c,this.frag.appendChild(t);(0,o.default)(this.vm,this.frag),(0,r.insertNode)(this.frag,this.anchor)}else console.error(this.expression+"必须为对象或数组")}}}},"./src/main.js":function(e,t,n){"use strict";var i=c(n("./src/observer.js")),r=c(n("./src/watcher.js")),o=n("./src/utils.js"),s=(c(n("./src/directives.js")),c(n("./src/compile.js")));function c(e){return e&&e.__esModule?e:{default:e}}function a(e){this._watchers=[],this._textNodes=[],this._events={},this._directives=[],this.$options=e,this.init()}a.prototype={init:function(){this.initData(),this.initMethods(),(0,i.default)(this._data),this._compile(),this.initWatch()},initData:function(){var e=this;e.$el=document.querySelector(e.$options.el);var t=e.$options.data;t=e._data="function"==typeof t?t():t||{},Object.keys(t).forEach(function(t){e.proxy(e,"_data",t)})},initMethods:function(){var e=this,t=e.$options.methods?e.$options.methods:{};Object.keys(t).forEach(function(n){e[n]=t[n]})},initWatch:function(){var e=this;if(this.$options.watch){var t=this.$options.watch;Object.keys(t).forEach(function(n){e.$watch(n,t[n])})}},proxy:function(e,t,n){var i={enumerable:!0,configurable:!0,get:function(){return this[t][n]},set:function(e){this[t][n]=e}};Object.defineProperty(e,n,i)},$set:function(e,t,n){this[e][t]=n,vm[e].__ob__.dep.notify()},$delete:function(e,t){(0,o.isArray)(this[e])?this[e].splice(t,1):delete this[e][t],vm[e].__ob__.dep.notify()},$watch:function(e,t){new r.default(this,e,t)},$on:function(e,t){(this._events[e]||(this._events[e]=[])).push(t)},$off:function(e,t){var n=this._events[e];if(t)for(var i=n.length;i--;){n[i]===t&&n.splice(i,1)}else n.length=0},$emit:function(e){var t=this,n=this._events[e],i=(0,o.toArray)(arguments,1);n?i.length>1?n.forEach(function(e){e.apply(t,i)}):n.forEach(function(e){e.call(t,i[0])}):this._events[e]=[]},$once:function(e,t){var n=this;this.$on(e,function i(){n.$off(e,i),t.apply(this,arguments)})},_compile:function(){(0,s.default)(this,this.$el)}},window.MiniVue=a},"./src/observer.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=a;var r=function(e){return e&&e.__esModule?e:{default:e}}(n("./src/dep.js")),o=n("./src/utils.js");var s=Array.prototype,c=Object.create(s);function a(e,t){if(e&&"object"===(void 0===e?"undefined":i(e))){return(0,o.hasOwn)(e,"__ob__")&&e.__ob__ instanceof u?e.__ob__:new u(e)}}function u(e){this.value=e,this.dep=new r.default,(0,o.def)(e,"__ob__",this),(0,o.isArray)(e)?(e.__proto__=c,this.observeArray(e)):this.walk(e)}function d(e,t,n){var i=new r.default,s=a(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){if(r.default.target&&(i.depend(),s&&s.dep.depend(),(0,o.isArray)(n)))for(var e,t=0,c=n.length;t<c;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend();return n},set:function(e){n!==e&&(n=e,s=a(e),i.notify())}})}["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(e){var t=s[e];(0,o.def)(c,e,function(){for(var n=arguments.length,i=Array(n),r=0;r<n;r++)i[r]=arguments[r];var o=t.apply(this,i),s=this.__ob__,c=void 0;switch(e){case"push":case"unshift":c=i;break;case"splice":c=i.slice(2)}return c&&s.observeArray(c),s.dep.notify(),o})}),u.prototype={walk:function(e){for(var t=Object.keys(e),n=0,i=t.length;n<i;n++)d(e,t[n],e[t[n]])},observeArray:function(e){e.forEach(function(e){a(e)})}}},"./src/utils.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.toArray=function(e,t){return t=t||0,[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(e)).slice(t)},t.replace=function(e,t){var n=e.parentNode;n&&n.replaceChild(t,e)},t.extend=function(e,t){var n=Object.keys(t),i=n.length;for(;i--;)e[n[i]]=t[n[i]];return e},t.on=function(e,t,n,i){e.addEventListener(t,n,i)},t.off=function(e,t,n){e.removeEventListener(t,n)},t.bind=function(e,t){return function(n){var i=arguments.length;return i?i>1?e.apply(t,arguments):e.call(t,n):e.call(t)}},t.def=function(e,t,n,i){Object.defineProperty(e,t,{value:n,enumerable:!!i,writable:!0,configurable:!0})},t.hasOwn=function(e,t){return hasOwnProperty.call(e,t)},t.isObject=function(e){return null!==e&&"object"===(void 0===e?"undefined":i(e))},t.getAttr=function(e,t){return e.getAttribute(t)},t.remove=function(e){e.parentNode.removeChild(e)},t.insertNode=function(e,t){t.parentNode.insertBefore(e,t)};var r=Array.isArray;t.isArray=r},"./src/watcher.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=s;var i=function(e){return e&&e.__esModule?e:{default:e}}(n("./src/dep.js")),r=n("./src/utils.js");var o=0;function s(e,t,n){if(e._watchers.push(this),this.id=o++,this.vm=e,this.expression=t,this.deps=[],this.depIds=new Set,this.cb=n,"function"==typeof t)this.getter=t,this.setter=void 0;else{var i=function(e){var t={exp:e=e.trim()};return t.get=new Function("vm","return vm."+e),t}(t);this.getter=i.get,this.setter=function(n){e[t]=n}}this.value=this.get()}s.prototype={get:function(){i.default.target=this;var e=this.getter.call(this.vm,this.vm);return i.default.target=null,e},set:function(e){this.setter.call(this.vm,e)},update:function(){this.run()},run:function(){var e=this.get(),t=this.value;this.value=e,(e!==t||(0,r.isObject)(e))&&this.cb.call(this.vm,e,t)},addDep:function(e){this.depIds.has(e.id)||(this.deps.push(e),this.depIds.add(e.id),e.addSub(this))},teardown:function(){this.vm._watchers.splice(this.vm._watchers.indexOf(this),1);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.vm=this.cb=this.value=null}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,